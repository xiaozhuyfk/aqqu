Query: what movie did danny devito win an award for in 1981
Entity: (u'Award (Chivalric Title)', 1.0, 214152, False)
Entity: (u'Danny DeVito', 0.999885402143, 52351, True)
Entity: (u'1981 Irish hunger strike', 0.677418808325, 583, False)
Entity: (u'FIL Award', 0.588235220761, 89, False)
Entity: (u'The Axemen', 0.193548949844, 1531, False)
Entity: (u'Twitter', 0.164705313107, 19446405, False)
Entity: (u'Pacem in Terris Award', 0.152941805869, 180, False)
Entity: (u'United States presidential election, 1980', 0.129032241831, 26, False)
Entity: (u'Film', 0.498307458078, 3444452, False)
Entity: (u'1981', 0, 0, True)
TargetType: Other
Root Node: Danny DeVito
Candidate Graph:   QueryCandidate [pattern:ERMRERT
  Entity [name:Danny DeVito, Danny DeVito: tokens:danny,devito prob:1.000 score:52351 perfect_match:True]
    ->Relation [name:award.award_winner.awards_won, award.award_winner.awards_won -> award.award_honor.year:
  RelationName: win=winner,win=win,award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: win=winner:0.55,win=win:1.00,award=award:1.00,award=award:1.00,award=award:1.00,award=honor:0.51]
  Variable [index:0]
    ->Relation [name:award.award_honor.year, award.award_winner.awards_won -> award.award_honor.year:
  RelationName: win=winner,win=win,award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: win=winner:0.55,win=win:1.00,award=award:1.00,award=award:1.00,award=award:1.00,award=honor:0.51]
    ->Relation [name:award.award_honor.award, award.award_honor.award:
  RelationName: award=award,award=award,award=award
  DerivationMatch: award=award,award=award,award=honor,award=award
  RelationNameSynonym: award=award:1.00,award=honor:0.51,award=award:1.00]
  Entity [name:1981, 1981: tokens:1981 prob:0.000 score:0 perfect_match:True]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRERT
  [Danny DeVito (m.0q9kd)] -> [award.award_winner.awards_won] -> [?0]
  [?0] -> [award.award_honor.year] -> [1981]
  [?0] -> [award.award_honor.award] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0q9kd fb:award.award_winner.awards_won ?0 .
 ?0 fb:award.award_honor.year "1981"^^xsd:datetime .
 ?0 fb:award.award_honor.award ?1 .
 FILTER (?1 != fb:m.0q9kd && ?1 != "1981"^^xsd:datetime) 
} LIMIT 300
Result: Primetime Emmy Award for Outstanding Supporting Actor - Comedy Series (m.09qv3c) Primetime Emmy Award for Outstanding Supporting Actor in a Comedy, Variety or Music Series (m.0t4r672)
Root Node: Danny DeVito
Candidate Graph:   QueryCandidate [pattern:ERMRERT
  Entity [name:Danny DeVito, Danny DeVito: tokens:danny,devito prob:1.000 score:52351 perfect_match:True]
    ->Relation [name:award.award_winner.awards_won, award.award_winner.awards_won -> award.award_honor.year:
  RelationName: win=winner,win=win,award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: win=winner:0.55,win=win:1.00,award=award:1.00,award=award:1.00,award=award:1.00,award=honor:0.51]
  Variable [index:0]
    ->Relation [name:award.award_honor.year, award.award_winner.awards_won -> award.award_honor.year:
  RelationName: win=winner,win=win,award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: win=winner:0.55,win=win:1.00,award=award:1.00,award=award:1.00,award=award:1.00,award=honor:0.51]
    ->Relation [name:award.award_honor.honored_for, award.award_honor.honored_for:
  RelationName: award=award,award=award
  DerivationMatch: award=award,award=award,award=honor,award=honor
  RelationNameSynonym: award=award:1.00,award=honor:0.51,award=honor:0.51]
  Entity [name:1981, 1981: tokens:1981 prob:0.000 score:0 perfect_match:True]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRERT
  [Danny DeVito (m.0q9kd)] -> [award.award_winner.awards_won] -> [?0]
  [?0] -> [award.award_honor.year] -> [1981]
  [?0] -> [award.award_honor.honored_for] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0q9kd fb:award.award_winner.awards_won ?0 .
 ?0 fb:award.award_honor.year "1981"^^xsd:datetime .
 ?0 fb:award.award_honor.honored_for ?1 .
 FILTER (?1 != fb:m.0q9kd && ?1 != "1981"^^xsd:datetime) 
} LIMIT 300
Result: Taxi (m.0q9jk)
Root Node: Danny DeVito
Candidate Graph:   QueryCandidate [pattern:ERMRERT
  Entity [name:Danny DeVito, Danny DeVito: tokens:danny,devito prob:1.000 score:52351 perfect_match:True]
    ->Relation [name:award.award_winner.awards_won, award.award_winner.awards_won -> award.award_honor.year:
  RelationName: win=winner,win=win,award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: win=winner:0.55,win=win:1.00,award=award:1.00,award=award:1.00,award=award:1.00,award=honor:0.51]
  Variable [index:0]
    ->Relation [name:award.award_honor.year, award.award_winner.awards_won -> award.award_honor.year:
  RelationName: win=winner,win=win,award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: win=winner:0.55,win=win:1.00,award=award:1.00,award=award:1.00,award=award:1.00,award=honor:0.51]
    ->Relation [name:award.award_honor.ceremony, award.award_honor.ceremony:
  RelationName: award=award,award=award
  DerivationMatch: award=award,award=award,award=honor
  RelationNameSynonym: award=award:1.00,award=honor:0.51]
  Entity [name:1981, 1981: tokens:1981 prob:0.000 score:0 perfect_match:True]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRERT
  [Danny DeVito (m.0q9kd)] -> [award.award_winner.awards_won] -> [?0]
  [?0] -> [award.award_honor.year] -> [1981]
  [?0] -> [award.award_honor.ceremony] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0q9kd fb:award.award_winner.awards_won ?0 .
 ?0 fb:award.award_honor.year "1981"^^xsd:datetime .
 ?0 fb:award.award_honor.ceremony ?1 .
 FILTER (?1 != fb:m.0q9kd && ?1 != "1981"^^xsd:datetime) 
} LIMIT 300
Result: 33rd Primetime Emmy Awards (m.0lv9lz0)
Root Node: Danny DeVito
Candidate Graph:   QueryCandidate [pattern:ERMRERT
  Entity [name:Danny DeVito, Danny DeVito: tokens:danny,devito prob:1.000 score:52351 perfect_match:True]
    ->Relation [name:award.award_nominee.award_nominations, award.award_nominee.award_nominations -> award.award_nomination.year:
  RelationName: award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00,award=award:1.00]
  Variable [index:0]
    ->Relation [name:award.award_nomination.year, award.award_nominee.award_nominations -> award.award_nomination.year:
  RelationName: award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00,award=award:1.00]
    ->Relation [name:award.award_nomination.award, award.award_nomination.award:
  RelationName: award=award,award=award,award=award
  DerivationMatch: award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00]
  Entity [name:1981, 1981: tokens:1981 prob:0.000 score:0 perfect_match:True]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRERT
  [Danny DeVito (m.0q9kd)] -> [award.award_nominee.award_nominations] -> [?0]
  [?0] -> [award.award_nomination.year] -> [1981]
  [?0] -> [award.award_nomination.award] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0q9kd fb:award.award_nominee.award_nominations ?0 .
 ?0 fb:award.award_nomination.year "1981"^^xsd:datetime .
 ?0 fb:award.award_nomination.award ?1 .
 FILTER (?1 != fb:m.0q9kd && ?1 != "1981"^^xsd:datetime) 
} LIMIT 300
Result: Golden Globe Award for Best Supporting Actor - Series, Miniseries or Television Film (m.08pfq2p) Razzie Award for Worst Supporting Actor (m.04ljl_l) Primetime Emmy Award for Outstanding Supporting Actor - Comedy Series (m.09qv3c) Primetime Emmy Award for Outstanding Supporting Actor in a Comedy, Variety or Music Series (m.0t4r672)
Root Node: Danny DeVito
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Danny DeVito, Danny DeVito: tokens:danny,devito prob:1.000 score:52351 perfect_match:True]
    ->Relation [name:award.award_winner.awards_won, award.award_winner.awards_won:
  RelationName: win=winner,win=win,award=award,award=award,award=award
  RelationNameSynonym: win=winner:0.55,win=win:1.00,award=award:1.00,award=award:1.00]
  Variable [index:0]
    ->Relation [name:award.award_honor.award, award.award_honor.award:
  RelationName: award=award,award=award,award=award
  DerivationMatch: award=award,award=award,award=honor,award=award
  RelationNameSynonym: award=award:1.00,award=honor:0.51,award=award:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Danny DeVito (m.0q9kd)] -> [award.award_winner.awards_won] -> [?0]
  [?0] -> [award.award_honor.award] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0q9kd fb:award.award_winner.awards_won ?0 .
 ?0 fb:award.award_honor.award ?1 .
 FILTER (?1 != fb:m.0q9kd) 
} LIMIT 300
Result: Golden Globe Award for Best Supporting Actor - Series, Miniseries or Television Film (m.08pfq2p) Primetime Emmy Award for Outstanding Supporting Actor - Comedy Series (m.09qv3c) Primetime Emmy Award for Outstanding Supporting Actor in a Comedy, Variety or Music Series (m.0t4r672)
Root Node: Danny DeVito
Candidate Graph:   QueryCandidate [pattern:ERMRERT
  Entity [name:Danny DeVito, Danny DeVito: tokens:danny,devito prob:1.000 score:52351 perfect_match:True]
    ->Relation [name:award.award_nominee.award_nominations, award.award_nominee.award_nominations -> award.award_nomination.year:
  RelationName: award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00,award=award:1.00]
  Variable [index:0]
    ->Relation [name:award.award_nomination.year, award.award_nominee.award_nominations -> award.award_nomination.year:
  RelationName: award=award,award=award,award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00,award=award:1.00]
    ->Relation [name:award.award_nomination.nominated_for, award.award_nomination.nominated_for:
  RelationName: award=award,award=award
  DerivationMatch: award=award,award=award
  RelationNameSynonym: award=award:1.00]
  Entity [name:1981, 1981: tokens:1981 prob:0.000 score:0 perfect_match:True]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRERT
  [Danny DeVito (m.0q9kd)] -> [award.award_nominee.award_nominations] -> [?0]
  [?0] -> [award.award_nomination.year] -> [1981]
  [?0] -> [award.award_nomination.nominated_for] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0q9kd fb:award.award_nominee.award_nominations ?0 .
 ?0 fb:award.award_nomination.year "1981"^^xsd:datetime .
 ?0 fb:award.award_nomination.nominated_for ?1 .
 FILTER (?1 != fb:m.0q9kd && ?1 != "1981"^^xsd:datetime) 
} LIMIT 300
Result: Taxi (m.0q9jk) Going Ape! (m.03y9nrn)

Query: when did japan end as a musical group
Entity: (u'Musical ensemble', 0.983225293265, 120561, False)
Entity: (u'Send in the Clowns', 0.693379984885, 895, False)
Entity: (u'Asa', 0.17427230227, 37629, True)
Entity: (u'Japan', 0.922832946225, 31422360, True)
Entity: (u'Group', 0.176437573469, 846, True)
Entity: (u'Social group', 0.138610333259, 11792, False)
Entity: (u'Group', 0.133716825004, 749, True)
TargetType: Date
Root Node: Japan
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Japan, Japan: tokens:japan prob:0.923 score:31422360 perfect_match:True]
    ->Relation [name:military.military_combatant.military_conflicts, military.military_combatant.military_conflicts -> military.military_combatant_group.combatants:
  RelationName: group=group
  DerivationMatch: group=group
  RelationContext: end:0.0010,group:0.0012
  RelationNameSynonym: group=group:1.00]
  Variable [index:0]
    ->Relation [name:military.military_combatant_group.combatants, military.military_combatant.military_conflicts -> military.military_combatant_group.combatants:
  RelationName: group=group
  DerivationMatch: group=group
  RelationContext: end:0.0010,group:0.0012
  RelationNameSynonym: group=group:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Japan (m.03_3d)] -> [military.military_combatant.military_conflicts] -> [?0]
  [?0] -> [military.military_combatant_group.combatants] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.03_3d fb:military.military_combatant.military_conflicts ?0 .
 ?0 fb:military.military_combatant_group.combatants ?1 .
 FILTER (?1 != fb:m.03_3d) 
} LIMIT 300
Result: 
Root Node: Japan
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Japan, Japan: tokens:japan prob:0.923 score:31422360 perfect_match:True]
    ->Relation [name:military.military_combatant.military_conflicts, military.military_combatant.military_conflicts -> military.military_combatant_group.combatants:
  RelationName: group=group
  DerivationMatch: group=group
  RelationContext: end:0.0010,group:0.0012
  RelationNameSynonym: group=group:1.00]
  Variable [index:0]
    ->Relation [name:military.military_combatant_group.combatants, military.military_combatant.military_conflicts -> military.military_combatant_group.combatants:
  RelationName: group=group
  DerivationMatch: group=group
  RelationContext: end:0.0010,group:0.0012
  RelationNameSynonym: group=group:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Japan (m.03_3d)] -> [military.military_combatant.military_conflicts] -> [?0]
  [?0] -> [military.military_combatant_group.combatants] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.03_3d fb:military.military_combatant.military_conflicts ?0 .
 ?0 fb:military.military_combatant_group.combatants ?1 .
 FILTER (?1 != fb:m.03_3d) 
} LIMIT 300
Result: 
Root Node: Japan
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Japan, Japan: tokens:japan prob:0.923 score:31422360 perfect_match:True]
    ->Relation [name:military.military_combatant.military_conflicts, military.military_combatant.military_conflicts -> military.military_combatant_group.conflict:
  RelationName: group=group
  DerivationMatch: group=group
  RelationContext: end:0.0061,group:0.0007
  RelationNameSynonym: group=group:1.00]
  Variable [index:0]
    ->Relation [name:military.military_combatant_group.conflict, military.military_combatant.military_conflicts -> military.military_combatant_group.conflict:
  RelationName: group=group
  DerivationMatch: group=group
  RelationContext: end:0.0061,group:0.0007
  RelationNameSynonym: group=group:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Japan (m.03_3d)] -> [military.military_combatant.military_conflicts] -> [?0]
  [?0] -> [military.military_combatant_group.conflict] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.03_3d fb:military.military_combatant.military_conflicts ?0 .
 ?0 fb:military.military_combatant_group.conflict ?1 .
 FILTER (?1 != fb:m.03_3d) 
} LIMIT 300
Result: Battle of Pingxingguan (m.03g36k) Battle of Makin (m.04f2l7) Marshalls–Gilberts raids (m.05q9jbm) Battle of Gemas (m.0660dvt) Battle of Guilin–Liuzhou (m.08_0l7) Battle of Suixian–Zaoyang (m.08n5bs) Battle of Xinkou (m.095wh1) Battle of Mindanao (m.09c30b) Battle of West Henan–North Hubei (m.09f_wk) Battle of South Shanxi (m.09fgvq) Solomon Islands campaign (m.09fqjm) Battle of South Henan (m.09g0sc) Battle of West Hubei (m.09g0x6) Raid at Los Baños (m.0bhf5n) Battle of Ratsua (m.0crbyd4) Invasion of Palawan (m.0dcsph) Battle of Lanfeng (m.0dz9t4) Battle of Northern and Eastern Henan (m.0ffx9z) Battle of Kunlun Pass (m.0fkwt6) Second Guangxi Campaign (m.0g3_k0) Battle of Yenangyaung (m.0gk_jk) Battle of Biak (m.0h7m10) Battle of Pearl Ridge (m.09gb2p_) Siege of Ilocos (m.05h7bvs) Iraq War (m.0d06vc) Battle of the Babuyan Islands (m.05h71_w) Japanese invasions of Korea (m.03c_kz) Operation Zipper (m.05zhnw) Battle of Camiguin (m.05h74fh) Battle of Marinduque (m.079yzzx) Battle of Tsimba Ridge (m.09k4j1k) Battle of Mabitac (1945) (m.05h7m0c) Invasion of Sarangani (m.05h78v8) Mongol conquests (m.03c3jzx) Battle of Nanking (m.0hf82) Battle of Noryang (m.06c3xd) Siege of Jinju (m.078xs6) Siege of Jinju (m.07vt21) Siege of Pyongyang (m.07xxc6) Siege of Pyongyang (m.091rcj) Battle of Byeokjegwan (m.0bm90np) Battle of Jiksan (m.0c02p5w) Battle of Imjin River (m.0d588_) Siege of Suncheon (m.0dlmm_s) Siege of Ulsan (m.0f2zpb) Siege of Dongnae (m.0gp34k) Masbate (m.01lxm7) Battle of the Hongorai River (m.09rv5x4) Battle of Porton Plantation (m.09gnjfw) Battle of Masbate (m.05h982k) Battle of Daanbantayan (m.05prg3d) Invasion of Ryukyu (m.02r8z1v) Battle of Amami-Ōshima (m.03d4b9j) Hamgyong campaign (m.07mkjq)
Root Node: Japan
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Japan, Japan: tokens:japan prob:0.923 score:31422360 perfect_match:True]
    ->Relation [name:military.military_combatant.military_conflicts, military.military_combatant.military_conflicts:
  ]
  Variable [index:0]
    ->Relation [name:military.military_combatant_group.conflict, military.military_combatant_group.conflict:
  RelationName: group=group
  DerivationMatch: group=group
  RelationContext: end:0.0061
  RelationNameSynonym: group=group:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Japan (m.03_3d)] -> [military.military_combatant.military_conflicts] -> [?0]
  [?0] -> [military.military_combatant_group.conflict] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.03_3d fb:military.military_combatant.military_conflicts ?0 .
 ?0 fb:military.military_combatant_group.conflict ?1 .
 FILTER (?1 != fb:m.03_3d) 
} LIMIT 300
Result: Battle of Pingxingguan (m.03g36k) Battle of Makin (m.04f2l7) Marshalls–Gilberts raids (m.05q9jbm) Battle of Gemas (m.0660dvt) Battle of Guilin–Liuzhou (m.08_0l7) Battle of Suixian–Zaoyang (m.08n5bs) Battle of Xinkou (m.095wh1) Battle of Mindanao (m.09c30b) Battle of West Henan–North Hubei (m.09f_wk) Battle of South Shanxi (m.09fgvq) Solomon Islands campaign (m.09fqjm) Battle of South Henan (m.09g0sc) Battle of West Hubei (m.09g0x6) Raid at Los Baños (m.0bhf5n) Battle of Ratsua (m.0crbyd4) Invasion of Palawan (m.0dcsph) Battle of Lanfeng (m.0dz9t4) Battle of Northern and Eastern Henan (m.0ffx9z) Battle of Kunlun Pass (m.0fkwt6) Second Guangxi Campaign (m.0g3_k0) Battle of Yenangyaung (m.0gk_jk) Battle of Biak (m.0h7m10) Battle of Pearl Ridge (m.09gb2p_) Siege of Ilocos (m.05h7bvs) Iraq War (m.0d06vc) Battle of the Babuyan Islands (m.05h71_w) Japanese invasions of Korea (m.03c_kz) Operation Zipper (m.05zhnw) Battle of Camiguin (m.05h74fh) Battle of Marinduque (m.079yzzx) Battle of Tsimba Ridge (m.09k4j1k) Battle of Mabitac (1945) (m.05h7m0c) Invasion of Sarangani (m.05h78v8) Mongol conquests (m.03c3jzx) Battle of Nanking (m.0hf82) Battle of Noryang (m.06c3xd) Siege of Jinju (m.078xs6) Siege of Jinju (m.07vt21) Siege of Pyongyang (m.07xxc6) Siege of Pyongyang (m.091rcj) Battle of Byeokjegwan (m.0bm90np) Battle of Jiksan (m.0c02p5w) Battle of Imjin River (m.0d588_) Siege of Suncheon (m.0dlmm_s) Siege of Ulsan (m.0f2zpb) Siege of Dongnae (m.0gp34k) Masbate (m.01lxm7) Battle of the Hongorai River (m.09rv5x4) Battle of Porton Plantation (m.09gnjfw) Battle of Masbate (m.05h982k) Battle of Daanbantayan (m.05prg3d) Invasion of Ryukyu (m.02r8z1v) Battle of Amami-Ōshima (m.03d4b9j) Hamgyong campaign (m.07mkjq)

Query: what sort of weave is used to make tweed
Entity: (u'GNU/Linux', 1.0, 7995206, False)
Entity: (u'Newfoundland and Labrador', 0.999980274967, 101392, False)
Entity: (u'Clarence Thomas', 0.513434075445, 155203, False)
Entity: (u'Fenway Park', 0.378319068515, 185205, False)
Entity: (u'Medicare', 0.108091373211, 2941905, False)
Entity: (u'Tweed', 0.511330286787, 10762, True)
Entity: (u'Artificial hair integrations', 0.476172290178, 9107, False)
Entity: (u'Weaving', 0.321245010874, 44182, False)
Entity: (u'sort', 0.257736795752, 247, True)
Entity: (u'Sort, Lleida', 0.249271273773, 51, False)
Entity: (u'Strategic Offensive Reductions Treaty', 0.24425471268, 3612, False)
Entity: (u'River Tweed', 0.168975605687, 7474, False)
Entity: (u'Weave', 0.104803172017, 370, True)
TargetType: Other
Root Node: Newfoundland and Labrador
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Newfoundland and Labrador, Newfoundland and Labrador: tokens:to,make prob:1.000 score:101392 perfect_match:False]
    ->Relation [name:symbols.coat_of_arms_bearer.coat_of_arms_used, symbols.coat_of_arms_bearer.coat_of_arms_used -> symbols.armorial_grant.coat_of_arms:
  RelationName: use=use
  DerivationMatch: use=use
  RelationNameSynonym: use=use:1.00,tweed=coat:0.44,tweed=coat:0.44,tweed=coat:0.44]
  Variable [index:0]
    ->Relation [name:symbols.armorial_grant.coat_of_arms, symbols.coat_of_arms_bearer.coat_of_arms_used -> symbols.armorial_grant.coat_of_arms:
  RelationName: use=use
  DerivationMatch: use=use
  RelationNameSynonym: use=use:1.00,tweed=coat:0.44,tweed=coat:0.44,tweed=coat:0.44]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Newfoundland and Labrador (m.05j49)] -> [symbols.coat_of_arms_bearer.coat_of_arms_used] -> [?0]
  [?0] -> [symbols.armorial_grant.coat_of_arms] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.05j49 fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?0 .
 ?0 fb:symbols.armorial_grant.coat_of_arms ?1 .
 FILTER (?1 != fb:m.05j49) 
} LIMIT 300
Result: Coat of arms of St. John's, Newfoundland and Labrador (m.0958jz)
Root Node: Newfoundland and Labrador
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Newfoundland and Labrador, Newfoundland and Labrador: tokens:to,make prob:1.000 score:101392 perfect_match:False]
    ->Relation [name:symbols.coat_of_arms_bearer.coat_of_arms_used, symbols.coat_of_arms_bearer.coat_of_arms_used:
  RelationName: use=use
  RelationNameSynonym: use=use:1.00,tweed=coat:0.44,tweed=coat:0.44]
  Variable [index:0]
    ->Relation [name:symbols.armorial_grant.coat_of_arms, symbols.armorial_grant.coat_of_arms:
  RelationNameSynonym: tweed=coat:0.44]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Newfoundland and Labrador (m.05j49)] -> [symbols.coat_of_arms_bearer.coat_of_arms_used] -> [?0]
  [?0] -> [symbols.armorial_grant.coat_of_arms] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.05j49 fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?0 .
 ?0 fb:symbols.armorial_grant.coat_of_arms ?1 .
 FILTER (?1 != fb:m.05j49) 
} LIMIT 300
Result: Coat of arms of St. John's, Newfoundland and Labrador (m.0958jz)
Root Node: Newfoundland and Labrador
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Newfoundland and Labrador, Newfoundland and Labrador: tokens:to,make prob:1.000 score:101392 perfect_match:False]
    ->Relation [name:symbols.coat_of_arms_bearer.coat_of_arms_used, symbols.coat_of_arms_bearer.coat_of_arms_used -> symbols.armorial_grant.granted_by:
  RelationName: use=use
  DerivationMatch: use=use
  RelationNameSynonym: use=use:1.00,tweed=coat:0.44,tweed=coat:0.44]
  Variable [index:0]
    ->Relation [name:symbols.armorial_grant.granted_by, symbols.coat_of_arms_bearer.coat_of_arms_used -> symbols.armorial_grant.granted_by:
  RelationName: use=use
  DerivationMatch: use=use
  RelationNameSynonym: use=use:1.00,tweed=coat:0.44,tweed=coat:0.44]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Newfoundland and Labrador (m.05j49)] -> [symbols.coat_of_arms_bearer.coat_of_arms_used] -> [?0]
  [?0] -> [symbols.armorial_grant.granted_by] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.05j49 fb:symbols.coat_of_arms_bearer.coat_of_arms_used ?0 .
 ?0 fb:symbols.armorial_grant.granted_by ?1 .
 FILTER (?1 != fb:m.05j49) 
} LIMIT 300
Result: 
Root Node: Tweed
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Tweed, Tweed: tokens:tweed prob:0.511 score:10762 perfect_match:True]
    ->Relation [name:fashion.textile.weave, fashion.textile.weave:
  RelationName: weave=weave
  DerivationMatch: weave=weave
  RelationContext: weave:0.0403
  RelationNameSynonym: weave=weave:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Tweed (m.09_f46)] -> [fashion.textile.weave] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.09_f46 fb:fashion.textile.weave ?0 .
 FILTER (?0 != fb:m.09_f46) 
} LIMIT 300
Result: Herringbone (m.04zx47y)
Root Node: GNU/Linux
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:GNU/Linux, GNU/Linux: tokens:is,used prob:1.000 score:7995206 perfect_match:False]
    ->Relation [name:organization.organization_sector.organizations_in_this_sector, organization.organization_sector.organizations_in_this_sector:
  RelationContext: make:0.0017
  RelationNameSynonym: sort=this:0.41]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [GNU/Linux (m.0fpzzp)] -> [organization.organization_sector.organizations_in_this_sector] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0fpzzp fb:organization.organization_sector.organizations_in_this_sector ?0 .
 FILTER (?0 != fb:m.0fpzzp) 
} LIMIT 300
Result: Linux-Manipur (m.03wjbhq) GOLUM (m.0877_q) Ontario Linux Fest (m.02vrbkq) LinuxChix (m.02v7q0) Linux user group (m.020_pp) SEUL (m.06yq7) RLUG (m.0cgnx4) Linuxfest Northwest (m.02qn268) NYLXS (m.06l1q3) Zlug (m.0c5mz3) Bangalore Linux User Group (m.03pzrp) Hellenic Linux User Group (m.04cgvh) Tidewater Unix Users Group (m.0b9j13) ILUG-Delhi (m.075rys) Linux Users of Victoria (m.026t0qr) Ohio LinuxFest (m.09tzp1) CalLUG (m.0gkv8w) Linux Users' Group of Davis (m.06b5gy) Lanka Linux User Group (m.04ghk5) LoCo team (m.027x9_5) Southern California Linux Expo (m.027j1th) Linux Australia (m.025wkw) Grupo de Usuarios de Linux de Costa Rica (m.041309)
Root Node: GNU/Linux
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:GNU/Linux, GNU/Linux: tokens:is,used prob:1.000 score:7995206 perfect_match:False]
    ->Relation [name:computer.software.languages_used, computer.software.languages_used:
  RelationContext: make:0.0012]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [GNU/Linux (m.0fpzzp)] -> [computer.software.languages_used] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0fpzzp fb:computer.software.languages_used ?0 .
 FILTER (?0 != fb:m.0fpzzp) 
} LIMIT 300
Result: C (m.01t6b)

Query: what bicycle models does raleigh manufacture
Entity: (u'Bicycle Models', 0.166666666667, 0, True)
Entity: (u'Bicycle Models', 0.166666666667, 0, True)
Entity: (u'Bicycle Models', 0.166666666667, 0, True)
Entity: (u'Bicycle Models', 0.166666666667, 0, True)
Entity: (u'Bicycle models', 0.166666666667, 0, True)
Entity: (u'Bicycle models', 0.166666666667, 0, True)
Entity: (u'Bicycle', 0.955090129129, 55244, True)
Entity: (u'Raleigh', 0.770311942976, 2008038, True)
Entity: (u'Model', 0.173636206762, 78754, False)
Entity: (u'Scientific modelling', 0.115049636351, 3188, False)
TargetType: Other
Root Node: Bicycle
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Bicycle, Bicycle: tokens:bicycle prob:0.955 score:55244 perfect_match:True]
    ->Relation [name:base.engineeringdraft.manufactured_component_category.meronyms, base.engineeringdraft.manufactured_component_category.meronyms:
  RelationName: manufacture=manufacture
  DerivationMatch: manufacture=manufacture
  RelationNameSynonym: manufacture=manufacture:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Bicycle (m.0199g)] -> [base.engineeringdraft.manufactured_component_category.meronyms] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0199g fb:base.engineeringdraft.manufactured_component_category.meronyms ?0 .
 FILTER (?0 != fb:m.0199g) 
} LIMIT 300
Result: Bicycle handlebar (m.02rqv26) Bicycle frame (m.01bqgn) Bicycle wheel (m.01bqk0) Crankset (m.01ms7j) Bicycle saddle (m.0g7v8f)
Root Node: Bicycle
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Bicycle, Bicycle: tokens:bicycle prob:0.955 score:55244 perfect_match:True]
    ->Relation [name:base.argumentmaps.original_idea.innovator, base.argumentmaps.original_idea.innovator:
  RelationContext: manufacture:0.0016,model:0.0016]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Bicycle (m.0199g)] -> [base.argumentmaps.original_idea.innovator] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0199g fb:base.argumentmaps.original_idea.innovator ?0 .
 FILTER (?0 != fb:m.0199g) 
} LIMIT 300
Result: Pierre Lallement (m.0chbjn) Olivier brothers (m.0cjh95) Pierre Michaux (m.0chgkt)
Root Node: Bicycle
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Bicycle, Bicycle: tokens:bicycle prob:0.955 score:55244 perfect_match:True]
    ->Relation [name:interests.collection_category.parent_category, interests.collection_category.parent_category:
  RelationContext: manufacture:0.0015,model:0.0012]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Bicycle (m.0199g)] -> [interests.collection_category.parent_category] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0199g fb:interests.collection_category.parent_category ?0 .
 FILTER (?0 != fb:m.0199g) 
} LIMIT 300
Result: Vehicle (m.07yv9)

Query: how many writing systems are used in japanese
Entity: (u'Writing system', 0.911144873965, 2543, False)
Entity: (u'Wakame', 0.853329924581, 5563, False)
Entity: (u'Japanese general election, 1928', 0.461111064259, 0, False)
Entity: (u'Newfoundland and Labrador', 0.142221654097, 101392, False)
Entity: (u'Soramimi', 0.122222269074, 29, False)
Entity: (u'System', 0.58453182609, 83083, False)
TargetType: Other
Root Node: Wakame
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Wakame, Wakame: tokens:used,in prob:0.853 score:5563 perfect_match:False]
    ->Relation [name:base.schemastaging.food_extra.broader, base.schemastaging.food_extra.broader:
  RelationContext: many:0.0008]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Wakame (m.040tm1)] -> [base.schemastaging.food_extra.broader] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.040tm1 fb:base.schemastaging.food_extra.broader ?0 .
 FILTER (?0 != fb:m.040tm1) 
} LIMIT 30000}
Result: 1

Query: what characters were on the cover of batman #1
Entity: (u'On the Cover', 0.742656151724, 47, True)
Entity: (u'On the Cover (TV Program)', 0.199568583871, 9, True)
Entity: (u'He Hit Me (Composition)', 1.0, 128, False)
Entity: (u'Twilight (Young Adult Book) #147', 0.418281104676, 2190, False)
Entity: (u'The Luv Show', 0.227066917834, 18, False)
Entity: (u'Lagopus', 0.210770954847, 272, False)
Entity: (u'The Cover', 0.197189452785, 25, True)
Entity: (u'Soviet Union', 0.164664808474, 5858281, False)
Entity: (u'Happy Nation', 0.164664808474, 38, False)
Entity: (u'David Horowitz', 0.144905183608, 65415, False)
Entity: (u'Cover version', 0.620217133283, 72764, False)
Entity: (u'Batman', 0.608938484599, 398670, True)
Entity: (u'Characters', 0.305673921723, 437, True)
TargetType: Other
Root Node: Batman
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Batman, Batman: tokens:batman prob:0.609 score:398670 perfect_match:True]
    ->Relation [name:comic_books.comic_book_character.cover_appearances, comic_books.comic_book_character.cover_appearances:
  RelationName: character=character,cover=cover
  DerivationMatch: character=character,cover=cover
  RelationContext: character:0.0413
  RelationNameSynonym: character=comic:0.45,character=character:1.00,cover=cover:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Batman (m.01d5g)] -> [comic_books.comic_book_character.cover_appearances] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01d5g fb:comic_books.comic_book_character.cover_appearances ?0 .
 FILTER (?0 != fb:m.01d5g) 
} LIMIT 300
Result: Batman #477 (m.03dfh34) Identity Crisis #1 (m.04cp09x) Identity Crisis #6 (m.04cp0f0) Detective Comics #33 (m.030rk_k) Batman #1 (m.02wkbg7) Batwing #7 (m.0j3rxq1) Batman #568 (m.03bw1dh) Batman #68 (m.03bwqlv) Detective Comics #734 (m.03bw1p5) Shadow of the Bat #1 (m.02wm2wd) Detective Comics #27 (m.02wk9x1) Detective Comics #38 (m.02wlp16) Batman #436 (m.02wlpqt) Detective Comics #779 (m.02wlytc) World's Finest Comics #3 (m.02wlzzk) Batman #567 (m.030rjwt) Detective Comics #411 (m.030rk6x) Detective Comics #741 (m.03bvjsf) Detective Comics #580 (m.03bx0cp) Superman/Batman #47 (m.042_zcz) Batman #611 (m.09vvtf1) Batman #612 (m.09vvwdt) Secret Origins, Vol. 1 (m.030rl69) Detective Comics #140 (m.02wlzl_) Batman #426 (m.02wkc7r) Batman #427 (m.02wkc9c)
Root Node: Batman
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Batman, Batman: tokens:batman prob:0.609 score:398670 perfect_match:True]
    ->Relation [name:fictional_universe.fictional_character_creator.fictional_characters_created, fictional_universe.fictional_character_creator.fictional_characters_created:
  RelationName: character=character,character=character
  DerivationMatch: character=character,character=character
  RelationContext: character:0.0388,cover:0.0003
  RelationNameSynonym: character=fictional:0.50,character=character:1.00,character=fictional:0.50,character=character:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Batman (m.01d5g)] -> [fictional_universe.fictional_character_creator.fictional_characters_created] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01d5g fb:fictional_universe.fictional_character_creator.fictional_characters_created ?0 .
 FILTER (?0 != fb:m.01d5g) 
} LIMIT 300
Result: Batman (m.026ffnz)
Root Node: Batman
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Batman, Batman: tokens:batman prob:0.609 score:398670 perfect_match:True]
    ->Relation [name:fictional_universe.fictional_character.character_created_by, fictional_universe.fictional_character.character_created_by:
  RelationName: character=character,character=character
  DerivationMatch: character=character,character=character
  RelationContext: character:0.0388,cover:0.0003
  RelationNameSynonym: character=fictional:0.50,character=character:1.00,character=character:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Batman (m.01d5g)] -> [fictional_universe.fictional_character.character_created_by] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01d5g fb:fictional_universe.fictional_character.character_created_by ?0 .
 FILTER (?0 != fb:m.01d5g) 
} LIMIT 300
Result: Bruce Timm (m.05vtbl) Bill Finger (m.011w20) Bob Kane (m.02nygk) Paul Dini (m.06jrhz)
Root Node: Batman
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Batman, Batman: tokens:batman prob:0.609 score:398670 perfect_match:True]
    ->Relation [name:comic_strips.comic_strip_character.comic_strips_appeared_in, comic_strips.comic_strip_character.comic_strips_appeared_in:
  RelationName: character=character
  DerivationMatch: character=character
  RelationContext: character:0.0189,cover:0.0008
  RelationNameSynonym: character=comic:0.45,character=character:1.00,character=comic:0.45]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Batman (m.01d5g)] -> [comic_strips.comic_strip_character.comic_strips_appeared_in] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01d5g fb:comic_strips.comic_strip_character.comic_strips_appeared_in ?0 .
 FILTER (?0 != fb:m.01d5g) 
} LIMIT 300
Result: Batman (m.07n2sj)
Root Node: Batman
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Batman, Batman: tokens:batman prob:0.609 score:398670 perfect_match:True]
    ->Relation [name:comic_books.comic_book_character.regular_featured_appearances, comic_books.comic_book_character.regular_featured_appearances:
  RelationName: character=character
  DerivationMatch: character=character
  RelationContext: character:0.0103,cover:0.0005
  RelationNameSynonym: character=comic:0.45,character=character:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Batman (m.01d5g)] -> [comic_books.comic_book_character.regular_featured_appearances] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01d5g fb:comic_books.comic_book_character.regular_featured_appearances ?0 .
 FILTER (?0 != fb:m.01d5g) 
} LIMIT 300
Result: Batman (m.09qkx3) Final Crisis (m.02w7zww) Superman: Red Son (m.02s6d9) Batman: The Man Who Laughs (m.06g2lr) Batman: The Dark Knight Returns (m.0jp9r) Infinite Crisis (m.05t57z) Batman: Legends of the Dark Knight (m.03h8z1) The Dark Knight Strikes Again (m.03pdq6) Blackest Night (m.03qnhwm) Batman: Cacophony (m.04f_07x) Superman/Batman (m.056p0l) Batman/Hellboy/Starman (m.05mslkb) Batman: The Return of Bruce Wayne (m.09k6wcg) Green Lantern: Rebirth (m.0bssw5) One Year Later (m.0c6_g5) Batman Confidential (m.0f0qn5) Flashpoint (m.0g9tfyz) Batman: Gates of Gotham (m.0gmgqh6) Identity Crisis (m.04z7tb) Detective Comics (m.02b66p)
Root Node: Batman
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Batman, Batman: tokens:batman prob:0.609 score:398670 perfect_match:True]
    ->Relation [name:comic_books.comic_book_series.featured_characters, comic_books.comic_book_series.featured_characters:
  RelationName: character=character
  DerivationMatch: character=character
  RelationContext: character:0.0103,cover:0.0005
  RelationNameSynonym: character=comic:0.45,character=character:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Batman (m.01d5g)] -> [comic_books.comic_book_series.featured_characters] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01d5g fb:comic_books.comic_book_series.featured_characters ?0 .
 FILTER (?0 != fb:m.01d5g) 
} LIMIT 300
Result: 

Query: how many episodes of taylor made piano were there
Entity: (u'TaylorMade-Adidas', 0.605763224569, 58054, False)
Entity: (u'Piano', 0.833676442114, 147843, True)
Entity: (u'Episode', 0.176139928418, 22364, False)
Entity: (u'Episodes', 0.157919044247, 4070, True)
Entity: (u'Pianos', 0.140255452171, 21389, False)
TargetType: Other
Query: who is the present newscaster on cbs evening news
Entity: (u'CBS Evening News', 0.99231284123, 237659, True)
Entity: (u'The Evening News (Newspaper) #2', 0.322500187702, 129, True)
Entity: (u'The Present', 0.317390777508, 284, True)
Entity: (u'Edinburgh Evening News', 0.214999545135, 6912, False)
Entity: (u'The Present', 0.203398315164, 182, True)
Entity: (u'The Present (Rock Album)', 0.182164425119, 163, True)
Entity: (u'CBS', 0.856024728164, 1667770, True)
Entity: (u'News Presenter', 0.849008927996, 0, False)
Entity: (u'Evening (m/04mx32)', 0.511346892319, 36337, True)
Entity: (u'News', 0.492882295248, 131990, True)
Entity: (u'Evening (Romance Film)', 0.243171504344, 991, True)
Entity: (u'NEWS', 0.184980476678, 672, True)
Entity: (u'Evening Magazine', 0.165656777078, 1602, False)
TargetType: person, organization, employer, character
Root Node: CBS Evening News
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:CBS Evening News, CBS Evening News: tokens:cbs,evening,news prob:0.992 score:237659 perfect_match:True]
    ->Relation [name:tv.tv_program.program_creator, tv.tv_program.program_creator:
  RelationContext: present:0.0017]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [CBS Evening News (m.01bndp)] -> [tv.tv_program.program_creator] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01bndp fb:tv.tv_program.program_creator ?0 .
 FILTER (?0 != fb:m.01bndp) 
} LIMIT 300
Result: Don Hewitt (m.078q1l) CBS News (m.01_8w2)
Root Node: CBS
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:CBS, CBS: tokens:cbs prob:0.856 score:1667770 perfect_match:True]
    ->Relation [name:base.newsevents.news_reporting_organisation.news_reports, base.newsevents.news_reporting_organisation.news_reports:
  RelationName: news=newsevent,news=news,news=news
  RelationNameSynonym: news=news:1.00,news=news:1.00]
  Variable [index:0]
    ->Relation [name:base.newsevents.news_report.title, base.newsevents.news_report.title:
  RelationName: news=newsevent,news=news
  RelationNameSynonym: news=news:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [CBS (m.09d5h)] -> [base.newsevents.news_reporting_organisation.news_reports] -> [?0]
  [?0] -> [base.newsevents.news_report.title] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.09d5h fb:base.newsevents.news_reporting_organisation.news_reports ?0 .
 ?0 fb:base.newsevents.news_report.title ?1 .
 FILTER (?1 != fb:m.09d5h) 
} LIMIT 300
Result: Spacewalk No. 4 moved from Friday to Saturday; no decision yet on tile repair Villages Flattened In Iran Quake
Root Node: CBS
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:CBS, CBS: tokens:cbs prob:0.856 score:1667770 perfect_match:True]
    ->Relation [name:base.newsevents.news_reporting_organisation.news_reports, base.newsevents.news_reporting_organisation.news_reports:
  RelationName: news=newsevent,news=news,news=news
  RelationNameSynonym: news=news:1.00,news=news:1.00]
  Variable [index:0]
    ->Relation [name:base.newsevents.news_report.event, base.newsevents.news_report.event:
  RelationName: news=newsevent,news=news
  RelationNameSynonym: news=news:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [CBS (m.09d5h)] -> [base.newsevents.news_reporting_organisation.news_reports] -> [?0]
  [?0] -> [base.newsevents.news_report.event] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.09d5h fb:base.newsevents.news_reporting_organisation.news_reports ?0 .
 ?0 fb:base.newsevents.news_report.event ?1 .
 FILTER (?1 != fb:m.09d5h) 
} LIMIT 300
Result: STS-118 (m.06b4bx) 2005 Qeshm earthquake (m.091h9r)
Root Node: CBS
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:CBS, CBS: tokens:cbs prob:0.856 score:1667770 perfect_match:True]
    ->Relation [name:base.newsevents.news_reporting_organisation.news_reports, base.newsevents.news_reporting_organisation.news_reports:
  RelationName: news=newsevent,news=news,news=news
  RelationNameSynonym: news=news:1.00,news=news:1.00]
  Variable [index:0]
    ->Relation [name:base.newsevents.news_report.date, base.newsevents.news_report.date:
  RelationName: news=newsevent,news=news
  RelationNameSynonym: news=news:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [CBS (m.09d5h)] -> [base.newsevents.news_reporting_organisation.news_reports] -> [?0]
  [?0] -> [base.newsevents.news_report.date] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.09d5h fb:base.newsevents.news_reporting_organisation.news_reports ?0 .
 ?0 fb:base.newsevents.news_report.date ?1 .
 FILTER (?1 != fb:m.09d5h) 
} LIMIT 300
Result: 2007-08-15 2005-11-27
Root Node: CBS
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:CBS, CBS: tokens:cbs prob:0.856 score:1667770 perfect_match:True]
    ->Relation [name:base.newsevents.news_reporting_organisation.news_reports, base.newsevents.news_reporting_organisation.news_reports:
  RelationName: news=newsevent,news=news,news=news
  RelationNameSynonym: news=news:1.00,news=news:1.00]
  Variable [index:0]
    ->Relation [name:base.newsevents.news_report.url, base.newsevents.news_report.url:
  RelationName: news=newsevent,news=news
  RelationNameSynonym: news=news:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [CBS (m.09d5h)] -> [base.newsevents.news_reporting_organisation.news_reports] -> [?0]
  [?0] -> [base.newsevents.news_report.url] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.09d5h fb:base.newsevents.news_reporting_organisation.news_reports ?0 .
 ?0 fb:base.newsevents.news_report.url ?1 .
 FILTER (?1 != fb:m.09d5h) 
} LIMIT 300
Result: http://www.cbsnews.com/network/news/space/118/STS-118_Archive.html http://www.cbsnews.com/stories/2005/11/27/world/main1075797.shtml
Root Node: News Presenter
Candidate Graph:   QueryCandidate [pattern:ERMRERT
  Entity [name:News Presenter, News Presenter: tokens:newscaster prob:0.849 score:0 perfect_match:False]
    ->Relation [name:business.job_title.people_with_this_title, business.job_title.people_with_this_title -> business.employment_tenure.company:
  RelationContext: news:0.0020,present:0.0006]
  Variable [index:0]
    ->Relation [name:business.employment_tenure.company, business.job_title.people_with_this_title -> business.employment_tenure.company:
  RelationContext: news:0.0020,present:0.0006]
    ->Relation [name:business.employment_tenure.person, business.employment_tenure.person:
  ]
  Entity [name:CBS, CBS: tokens:cbs prob:0.856 score:1667770 perfect_match:True]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRERT
  [News Presenter (m.014l7h)] -> [business.job_title.people_with_this_title] -> [?0]
  [?0] -> [business.employment_tenure.company] -> [CBS (m.09d5h)]
  [?0] -> [business.employment_tenure.person] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.014l7h fb:business.job_title.people_with_this_title ?0 .
 ?0 fb:business.employment_tenure.company fb:m.09d5h .
 ?0 fb:business.employment_tenure.person ?1 .
 FILTER (?1 != fb:m.014l7h && ?1 != fb:m.09d5h) 
} LIMIT 300
Result: Katie Couric (m.01w_10) Julie Chen (m.03h7zw) Charles Kuralt (m.027k8d) Harry Smith (m.03j9by) Roger Welsch (m.02wz2tk) Bob Schieffer (m.041r07) Richard Schlesinger (m.0gx0b12) Ross Palombo (m.0b6fby3) Laura Diaz (m.02718w0)

Query: did the big bang exhibit at the science museum cost money
Entity: (u'Science Museum', 0.999929373543, 28316, True)
Entity: (u'Big Bang', 0.392090468579, 296322, True)
Entity: (u'The Big Bang', 0.173080424431, 0, True)
Entity: (u'Conservation status', 1.0, 766, False)
Entity: (u'Big Bang', 0.600751269585, 296322, True)
Entity: (u'Malaysia', 0.527271766275, 4351832, False)
Entity: (u'Cardcaptor Sakura', 0.472726779795, 46890, False)
Entity: (u'Medical cannabis', 0.460306007727, 17293, False)
Entity: (u'Big Bang (K-pop Artist)', 0.282017893058, 139106, True)
Entity: (u'Brining', 0.223576462003, 3325, False)
Entity: (u'Emotion', 0.197274003311, 23284, False)
Entity: (u'Science museum', 0.164249954413, 7702, True)
Entity: (u'Musical acoustics', 0.118364401987, 1291, False)
Entity: (u'Money (Quotation Subject)', 0.750863000671, 70037, True)
Entity: (u'Collection (Organisation sector)', 0.239241545864, 14554, False)
Entity: (u'Art exhibition', 0.230697347509, 51269, False)
Entity: (u'Exhibit', 0.205064253453, 93, True)
Entity: (u'Bang!', 0.201390239198, 1630, True)
Entity: (u'Ernesto Neto', 0.119620772932, 3879, False)
Entity: (u'Bang! (Book) #37', 0.103042613185, 834, True)
Entity: (u'Exhibit', 0.102531877232, 0, True)
Entity: (u"Vincent van Gogh's display at Les XX, 1890", 0.102531877232, 0, False)
TargetType: Other
Root Node: Science Museum
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Science Museum, Science Museum: tokens:the,science,museum prob:1.000 score:28316 perfect_match:True]
    ->Relation [name:exhibitions.exhibition_venue.exhibitions_at_this_venue, exhibitions.exhibition_venue.exhibitions_at_this_venue:
  RelationName: exhibit=exhibition,exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71,exhibit=exhibition:0.71]
  Variable [index:0]
    ->Relation [name:exhibitions.exhibition_run.admission_fee, exhibitions.exhibition_run.admission_fee:
  RelationName: exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: cost=fee:0.50,exhibit=exhibition:0.71]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Science Museum (m.013yrz)] -> [exhibitions.exhibition_venue.exhibitions_at_this_venue] -> [?0]
  [?0] -> [exhibitions.exhibition_run.admission_fee] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.013yrz fb:exhibitions.exhibition_venue.exhibitions_at_this_venue ?0 .
 ?0 fb:exhibitions.exhibition_run.admission_fee ?1 .
 FILTER (?1 != fb:m.013yrz) 
} LIMIT 300
Result: 0 1
Root Node: Science Museum
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Science Museum, Science Museum: tokens:the,science,museum prob:1.000 score:28316 perfect_match:True]
    ->Relation [name:exhibitions.exhibition_venue.exhibitions_at_this_venue, exhibitions.exhibition_venue.exhibitions_at_this_venue:
  RelationName: exhibit=exhibition,exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71,exhibit=exhibition:0.71]
  Variable [index:0]
    ->Relation [name:exhibitions.exhibition_run.exhibition, exhibitions.exhibition_run.exhibition:
  RelationName: exhibit=exhibition,exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71,exhibit=exhibition:0.71]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Science Museum (m.013yrz)] -> [exhibitions.exhibition_venue.exhibitions_at_this_venue] -> [?0]
  [?0] -> [exhibitions.exhibition_run.exhibition] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.013yrz fb:exhibitions.exhibition_venue.exhibitions_at_this_venue ?0 .
 ?0 fb:exhibitions.exhibition_run.exhibition ?1 .
 FILTER (?1 != fb:m.013yrz) 
} LIMIT 300
Result: Listening Post (m.046chvt) Maurice Broomfield's 'New Look' at Industry: photographs from post-war Britain (m.046chwg) Alfa Romeo Sustaining Beauty (m.046chz_) Talking Points (m.046cj28) Health Matters (m.046cj3w) Dan Dare & the Birth of Hi-tech Britain (m.046chvm) Grossology (m.046chzq) Things (m.046ch_y) Space detectives (m.046cj2g) Who Am I? (m.046ch_g) Cold War, Hot Science (m.046ch_5) The Human Factor (m.046cj0d) Agriculture (m.046cj8b) The Lord of the Rings Motion Picture Trilogy: The Exhibition (m.04zf21) Energy: fuelling the future (m.046cj79) Bond, James Bond (m.046chzj) Does flying cost the Earth? (m.046chl0) NorthSouthEastWest (m.046chxh) Veterinary History (m.046ch_n) Nuclear Waste: can you handle it? (m.046cj33) The Science and Art of Medicine (m.046cj03) Inside the Spitfire (m.046chx9) The Science of Spying (m.03c1c0c) Weather (m.046ch_k) Changing Our World (m.06w95jp) millennium bug: all or nothing? (m.046ch_2) Launchpad (m.046cj3l) Game On (m.046chwr) Docks and Diving (m.046cj7h) Geographical Magazine Photographer of the Year (m.046cj44) Science of Sport (m.046cj2r) Computing (m.046cj7s) Can algae save the world? (m.046chvx) Mind your Head? 100 years of Psychology in Britain (m.046cj39) Grace Weir - In my own time (m.046chv_) Science in the 18th Century (m.046cj2v) The Hitchhiker's Guide to the Galaxy Exhibition (m.046cj0h) Nanotechnology: small science, big deal (m.046cj36) Japan Car: Designs for the Crowded Globe (m.04st6l2) Big Bang! (m.046chwc) Titanic: The Artifact Exhibition (m.046ch_r) Geophysics and Oceanography (m.046cj41) The Garden (m.046cj22) Flight (m.046cj70) Metamorphing (m.046chzm) The MMR Files (m.046cj09) Exclusive! Tales From the Tabloid Front Line (m.046cj76) The Secret Life of the Home (m.046cj00) Pain (m.046cj30) Time Measurement (m.046ch_v) Climate Change: the Burning Issue (m.046cj7w) Antenna (m.046cj87) Prove It! All the evidence you need to believe in climate change (m.0dgkkqt) Making the Modern World (m.02hz0zf) Shipping (m.046cj2n) Penicillin: A story of triumph and tragedy (m.046chw8) Move Over Einstein (m.046chxd) Climate change - what's it to you? Photography Competition (m.046cj7z) The Science Of Survival (m.046chvq) Fast Forward: 20 ways F1™ is changing our world (m.05kkz55) The Science of Aliens (m.03d24gx) EYE to the future: The Vision of Arthur C. Clarke (m.046ch_c) Plasticity - 100 years of making plastics (m.046chw5) Playing with Science (m.046chwn) NEURObotics... the future of thinking? (m.046chwv) Pure Iceland (m.046chx3) Digital You (m.046chx6) Surveying (m.046cj2c) Pattern Pod (m.046cj2y) In Future (m.046cj3p) Glimpses of Medical History (m.046cj3z) Digitopolis (m.046cj7l) Challenge of Materials (m.046cj81) Building to the limits (m.046cj84) Dead Ringers? (m.046cj7p) Energy Hall (m.046cj7d) Mathematics (m.046cj3d) Wallace and Gromit's World of Cracking Ideas (m.04st6f2) Marine Engineering (m.046cj3h) Films of Fact (m.046chvj) Treat Yourself: Health consumers in a medical age (m.046chzf) Exploring Space (m.046cj73) Pixar: 20 Years of Animation (m.046chwy) Japan: Gateway to the Future (m.046chzx) Heat and Temperature (m.046cj3s) Head on: art with the brain in mind (m.046chzt) Future Face (m.046cj47) Isambard Kingdom Brunel: fame and fate (m.046chwk) Telecommunications (m.046cj25) The Art of Invention (m.046ch_8)
Root Node: Science Museum
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Science Museum, Science Museum: tokens:the,science,museum prob:1.000 score:28316 perfect_match:True]
    ->Relation [name:exhibitions.exhibition_venue.exhibitions_at_this_venue, exhibitions.exhibition_venue.exhibitions_at_this_venue:
  RelationName: exhibit=exhibition,exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71,exhibit=exhibition:0.71]
  Variable [index:0]
    ->Relation [name:exhibitions.exhibition_run.sponsor, exhibitions.exhibition_run.sponsor:
  RelationName: exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Science Museum (m.013yrz)] -> [exhibitions.exhibition_venue.exhibitions_at_this_venue] -> [?0]
  [?0] -> [exhibitions.exhibition_run.sponsor] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.013yrz fb:exhibitions.exhibition_venue.exhibitions_at_this_venue ?0 .
 ?0 fb:exhibitions.exhibition_run.sponsor ?1 .
 FILTER (?1 != fb:m.013yrz) 
} LIMIT 300
Result: Nintendo (m.059wk) Siemens (m.016l20) Suzuki Motor Corporation (m.02ws0w) European Aeronautic Defence and Space Company N.V. (EADS) (m.0n3tb) Toyota Motor Corporation (m.07mb6) Mitsubishi Motors (m.01cylx) Nissan Motor Co., Ltd. (m.05b4c) HSBC (m.01vq1f) Royal Dutch Shell (m.0g5vy) Science and Technology Facilities Council (m.02qjph5) United Kingdom Department for Environment, Food and Rural Affairs (m.01rypg) Alfa Romeo (m.09c50) Daihatsu Motor Company (m.01gm7z) TAU Corporation (m.04st6sg) Yamagin Corporation (m.04st6sp) Arai Shoji Co., Ltd. (m.04st6sz) Nippon Design Center, Inc. (m.04st6t5) Garfield Weston Foundation (m.03w9pf4) SITA Trust (m.047hq93) Intellectual Property Office (m.04kd2n) Zochonis Charitable Trust (m.047l2gk)
Root Node: Science Museum
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Science Museum, Science Museum: tokens:the,science,museum prob:1.000 score:28316 perfect_match:True]
    ->Relation [name:exhibitions.exhibition_venue.exhibitions_at_this_venue, exhibitions.exhibition_venue.exhibitions_at_this_venue:
  RelationName: exhibit=exhibition,exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71,exhibit=exhibition:0.71]
  Variable [index:0]
    ->Relation [name:exhibitions.exhibition_run.opened_on, exhibitions.exhibition_run.opened_on:
  RelationName: exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Science Museum (m.013yrz)] -> [exhibitions.exhibition_venue.exhibitions_at_this_venue] -> [?0]
  [?0] -> [exhibitions.exhibition_run.opened_on] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.013yrz fb:exhibitions.exhibition_venue.exhibitions_at_this_venue ?0 .
 ?0 fb:exhibitions.exhibition_run.opened_on ?1 .
 FILTER (?1 != fb:m.013yrz) 
} LIMIT 300
Result: 2000-12-01 2008-04-30 2007-10-18 2000-06-23 1999-12-06 2002-10-16 2008-05-15 2005-03-14 2005-10-24 1999-12-10 2003-07-01 2001-01-19 2007-10-02 2005-05-28 2005-02-25 2008-02-19 2008-11-29 2007-02-10 2002-10-03 2007-02-21 2009-10-21 2005-04-16 2009-03-11 1995-12-11 2006-01-20 2005-11-08 2008-04-05 2009-03-27 2007-05-22 2005-10-14 2002-05-11 2006-11-18 2006-10-17 2005-09-14 2006-04-01 2007-04-03 2007-05-10 2006-03-29 2008-05-29 2008-05-23 2002-02-01 2002-03-15 2007-01-01 2003-09-16 2006-10-21 1999-10-15
Root Node: Science Museum
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Science Museum, Science Museum: tokens:the,science,museum prob:1.000 score:28316 perfect_match:True]
    ->Relation [name:exhibitions.exhibition_venue.exhibitions_at_this_venue, exhibitions.exhibition_venue.exhibitions_at_this_venue -> exhibitions.exhibition_run.exhibition:
  RelationName: exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71,exhibit=exhibition:0.71,exhibit=exhibition:0.71,exhibit=exhibition:0.71]
  Variable [index:0]
    ->Relation [name:exhibitions.exhibition_run.exhibition, exhibitions.exhibition_venue.exhibitions_at_this_venue -> exhibitions.exhibition_run.exhibition:
  RelationName: exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71,exhibit=exhibition:0.71,exhibit=exhibition:0.71,exhibit=exhibition:0.71]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Science Museum (m.013yrz)] -> [exhibitions.exhibition_venue.exhibitions_at_this_venue] -> [?0]
  [?0] -> [exhibitions.exhibition_run.exhibition] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.013yrz fb:exhibitions.exhibition_venue.exhibitions_at_this_venue ?0 .
 ?0 fb:exhibitions.exhibition_run.exhibition ?1 .
 FILTER (?1 != fb:m.013yrz) 
} LIMIT 300
Result: Listening Post (m.046chvt) Maurice Broomfield's 'New Look' at Industry: photographs from post-war Britain (m.046chwg) Alfa Romeo Sustaining Beauty (m.046chz_) Talking Points (m.046cj28) Health Matters (m.046cj3w) Dan Dare & the Birth of Hi-tech Britain (m.046chvm) Grossology (m.046chzq) Things (m.046ch_y) Space detectives (m.046cj2g) Who Am I? (m.046ch_g) Cold War, Hot Science (m.046ch_5) The Human Factor (m.046cj0d) Agriculture (m.046cj8b) The Lord of the Rings Motion Picture Trilogy: The Exhibition (m.04zf21) Energy: fuelling the future (m.046cj79) Bond, James Bond (m.046chzj) Does flying cost the Earth? (m.046chl0) NorthSouthEastWest (m.046chxh) Veterinary History (m.046ch_n) Nuclear Waste: can you handle it? (m.046cj33) The Science and Art of Medicine (m.046cj03) Inside the Spitfire (m.046chx9) The Science of Spying (m.03c1c0c) Weather (m.046ch_k) Changing Our World (m.06w95jp) millennium bug: all or nothing? (m.046ch_2) Launchpad (m.046cj3l) Game On (m.046chwr) Docks and Diving (m.046cj7h) Geographical Magazine Photographer of the Year (m.046cj44) Science of Sport (m.046cj2r) Computing (m.046cj7s) Can algae save the world? (m.046chvx) Mind your Head? 100 years of Psychology in Britain (m.046cj39) Grace Weir - In my own time (m.046chv_) Science in the 18th Century (m.046cj2v) The Hitchhiker's Guide to the Galaxy Exhibition (m.046cj0h) Nanotechnology: small science, big deal (m.046cj36) Japan Car: Designs for the Crowded Globe (m.04st6l2) Big Bang! (m.046chwc) Titanic: The Artifact Exhibition (m.046ch_r) Geophysics and Oceanography (m.046cj41) The Garden (m.046cj22) Flight (m.046cj70) Metamorphing (m.046chzm) The MMR Files (m.046cj09) Exclusive! Tales From the Tabloid Front Line (m.046cj76) The Secret Life of the Home (m.046cj00) Pain (m.046cj30) Time Measurement (m.046ch_v) Climate Change: the Burning Issue (m.046cj7w) Antenna (m.046cj87) Prove It! All the evidence you need to believe in climate change (m.0dgkkqt) Making the Modern World (m.02hz0zf) Shipping (m.046cj2n) Penicillin: A story of triumph and tragedy (m.046chw8) Move Over Einstein (m.046chxd) Climate change - what's it to you? Photography Competition (m.046cj7z) The Science Of Survival (m.046chvq) Fast Forward: 20 ways F1™ is changing our world (m.05kkz55) The Science of Aliens (m.03d24gx) EYE to the future: The Vision of Arthur C. Clarke (m.046ch_c) Plasticity - 100 years of making plastics (m.046chw5) Playing with Science (m.046chwn) NEURObotics... the future of thinking? (m.046chwv) Pure Iceland (m.046chx3) Digital You (m.046chx6) Surveying (m.046cj2c) Pattern Pod (m.046cj2y) In Future (m.046cj3p) Glimpses of Medical History (m.046cj3z) Digitopolis (m.046cj7l) Challenge of Materials (m.046cj81) Building to the limits (m.046cj84) Dead Ringers? (m.046cj7p) Energy Hall (m.046cj7d) Mathematics (m.046cj3d) Wallace and Gromit's World of Cracking Ideas (m.04st6f2) Marine Engineering (m.046cj3h) Films of Fact (m.046chvj) Treat Yourself: Health consumers in a medical age (m.046chzf) Exploring Space (m.046cj73) Pixar: 20 Years of Animation (m.046chwy) Japan: Gateway to the Future (m.046chzx) Heat and Temperature (m.046cj3s) Head on: art with the brain in mind (m.046chzt) Future Face (m.046cj47) Isambard Kingdom Brunel: fame and fate (m.046chwk) Telecommunications (m.046cj25) The Art of Invention (m.046ch_8)
Root Node: Science Museum
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Science Museum, Science Museum: tokens:the,science,museum prob:1.000 score:28316 perfect_match:True]
    ->Relation [name:exhibitions.exhibition_venue.exhibitions_at_this_venue, exhibitions.exhibition_venue.exhibitions_at_this_venue -> exhibitions.exhibition_run.sponsor:
  RelationName: exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71,exhibit=exhibition:0.71,exhibit=exhibition:0.71]
  Variable [index:0]
    ->Relation [name:exhibitions.exhibition_run.sponsor, exhibitions.exhibition_venue.exhibitions_at_this_venue -> exhibitions.exhibition_run.sponsor:
  RelationName: exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition,exhibit=exhibition
  RelationNameSynonym: exhibit=exhibition:0.71,exhibit=exhibition:0.71,exhibit=exhibition:0.71]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Science Museum (m.013yrz)] -> [exhibitions.exhibition_venue.exhibitions_at_this_venue] -> [?0]
  [?0] -> [exhibitions.exhibition_run.sponsor] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.013yrz fb:exhibitions.exhibition_venue.exhibitions_at_this_venue ?0 .
 ?0 fb:exhibitions.exhibition_run.sponsor ?1 .
 FILTER (?1 != fb:m.013yrz) 
} LIMIT 300
Result: Nintendo (m.059wk) Siemens (m.016l20) Suzuki Motor Corporation (m.02ws0w) European Aeronautic Defence and Space Company N.V. (EADS) (m.0n3tb) Toyota Motor Corporation (m.07mb6) Mitsubishi Motors (m.01cylx) Nissan Motor Co., Ltd. (m.05b4c) HSBC (m.01vq1f) Royal Dutch Shell (m.0g5vy) Science and Technology Facilities Council (m.02qjph5) United Kingdom Department for Environment, Food and Rural Affairs (m.01rypg) Alfa Romeo (m.09c50) Daihatsu Motor Company (m.01gm7z) TAU Corporation (m.04st6sg) Yamagin Corporation (m.04st6sp) Arai Shoji Co., Ltd. (m.04st6sz) Nippon Design Center, Inc. (m.04st6t5) Garfield Weston Foundation (m.03w9pf4) SITA Trust (m.047hq93) Intellectual Property Office (m.04kd2n) Zochonis Charitable Trust (m.047l2gk)

Query: in what season of stargate sg-1 is the episode show and tell
Entity: (u'Show and Tell (Musical Recording) #34', 0.189136131061, 126, True)
Entity: (u'Show and tell', 0.133596156067, 89, True)
Entity: (u'Show and tell', 0.102073467557, 68, True)
Entity: (u'Stargate SG-1', 0.971065355264, 144974, True)
Entity: (u'Burr\u2013Hamilton duel', 0.618213820768, 271, False)
Entity: (u'The Strike (TV Episode) #1', 0.202219249023, 0, False)
Entity: (u'Stargate (Fictional Universe)', 0.390924840692, 21596, True)
Entity: (u'Episode', 0.292628485896, 22364, True)
Entity: (u'Season', 0.283846106731, 10457, True)
Entity: (u'Season', 0.277508146975, 29811, True)
Entity: (u'Stargate (Science Fiction Film)', 0.174839456559, 2195, True)
Entity: (u'Stargate', 0.167295734986, 22793, True)
Entity: (u'Stargate (Fictional Object)', 0.103086553801, 9803, True)
TargetType: Other
Root Node: Stargate SG-1
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Stargate SG-1, Stargate SG-1: tokens:stargate,sg-1 prob:0.971 score:144974 perfect_match:True]
    ->Relation [name:tv.tv_program.episodes, tv.tv_program.episodes:
  RelationName: episode=episode
  RelationContext: season:0.0199,episode:0.1075,show:0.0041,tell:0.0040
  RelationNameSynonym: episode=episode:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Stargate SG-1 (m.09kn9)] -> [tv.tv_program.episodes] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.09kn9 fb:tv.tv_program.episodes ?0 .
 FILTER (?0 != fb:m.09kn9) 
} LIMIT 300
Result: Counterstrike (m.0cf24w) Within the Serpent's Grasp (1) (m.0hpgj1r) Thor's Hammer (m.0647nf) Desperate Measures (m.09sl0d) Evolution (2) (m.06yfkb9) Heroes (m.07m60n) Beachhead (m.07mcsq) Babylon (m.07mctr) New Order (m.07m5_l) Fragile Balance (m.07mf2m) Prometheus (m.07mf7h) Thor's Chariot (m.079rzk) Abyss (m.07p75k) Space Race (m.07md_w) Maternal Instinct (m.08msmh) Ethon (m.09yk86) Seth (m.0644vf) Prototype (m.07mcvf) Shadow Play (m.07mfgr) Foothold (m.0697mp) A Matter of Time (m.08mp85) Jolinar's Memories (m.08mr3b) The Devil You Know (m.08msdj) Cold Lazarus (m.06476g) Redemption (2) (m.06yfk8b) The Fourth Horseman (2) (m.06yfkg9) Redemption (m.07m61b) Full Alert (m.07mckh) Disclosure (m.07mf9x) 48 Hours (m.09sl25) Crusade (m.0b0fs6) Camelot (m.0b0fsx) Flesh and Blood (m.0br51c) Covenant (m.07mcmk) Sight Unseen (m.07mfby) Proving Ground (m.09jyyl) The Sentinel (m.09rryk) Between Two Fires (m.09sk_0) Red Sky (m.09skq2) Demons (m.08mqtz) The Warrior (m.09gqyq) The Quest (1) (m.06yfkhg) Prisoners (m.079r9n) Children of the Gods (m.041178) Threads (m.07mcjf) Out of Mind (m.07mcwt) Hathor (m.0647yv) Family (m.07b_14) Into the Fire (m.07mcy5) Spirits (m.03910v) The Enemy Within (m.0608sd) 1969 (m.060vv6) Emancipation (m.064713) The Broca Divide (m.06472v) The First Commandment (m.06474_) The Nox (m.0647d0) Brief Candle (m.0647hj) The Torment of Tantalus (m.0647r6) Bloodlines (m.0647s_) Fire and Water (m.0647vd) Singularity (m.064822) Cor-ai (m.064833) Enigma (m.06485j) Solitudes (m.06yfk23) Tin Man (m.06yfk2f) There But For the Grace of God (m.06yfk2r) Politics (1) (m.06yfk31) The Tok'ra (1) (m.06yfk3_) The Tok'ra (2) (m.06yfk49) Avalon (1) (m.07m5y3) The Serpent's Lair (m.07ysb8) Need (m.07ysn2) Touchstone (m.08mp4w) One False Step (m.08mpkz) Show and Tell (m.08mpny) 200 (m.0cb0_f) Moebius (2) (m.06yfkf2) Lockdown (m.07mcny) Birthright (m.07mdz3) Origin (m.07mcpz) 2001 (m.09sk_q) Off the Grid (m.0b0fp1) Unnatural Selection (m.07mf7v) Ripple Effect (m.08mlrc) Memento Mori (m.0cf25x) The Pegasus Project (m.0bqvhm) Full Circle (m.07mf4b) In the Line of Duty (m.079qw1) Fallout (m.07mdy2) Memento (m.07mfdp) Resurrection (m.07mdwq) Chain Reaction (m.092g5k) Frozen (m.07p76l) Nemesis (m.08msr_) Small Victories (m.09rb33) Tangent (m.09bc08) Point of No Return (m.09ryq7) The Shroud (m.0dmc6w) Line In The Sand (m.0dzp2m) Icon (m.07mcpm) Pretense (m.08mshc) Affinity (m.07mcn7) Reckoning (2) (m.06yfkdd) Gemini (m.07mcl5) The Changeling (m.07mfcm) The Tomb (m.09skxy) Lost City (m.06zf2x) Zero Hour (m.07mcp8) Stronghold (m.09yk9l) Ex Deus Machina (m.07ht9j) Bane (m.08mp0x) Heroes, Part 2 (m.06yfkby) Fail Safe (m.09r6px) Death Knell (m.07mdxd) Sci Fi Inside: Stargate SG-1 200 (m.0j86wp5) Scorched Earth (m.09kcnk) Insiders (m.0cf22q) Uninvited (m.0cf23v) Cure (m.07mffc) The Fourth Horseman (1) (m.06yfkf_) Forsaken (m.07mfc8) Inauguration (m.07mdw0) Point of View (m.08mqkm) The Fifth Man (m.09sknc) The Quest (2) (m.06yfkhs) Holiday (m.08mpfm) The Serpent's Venom (m.09ryv1) Allegiance (m.07mfg1) The First Ones (m.08qv9k) The Curse (m.09rysp) Shades of Grey (m.06c533) Beast of Burden (m.06hvw_) Watergate (m.06hw4_) Lost City (2) (m.06yfkcf) Avenger 2.0 (m.07mdzt) Revisions (m.07mf1y) Homecoming (m.07mf39) Fallen (m.07mf3n) Revelations (m.07nxtd) Fair Game (m.07q1m7) The Gamekeeper (m.07yslp) Learning Curve (m.08mq9k) Deadman Switch (m.08mqqh) Crystal Skull (m.08msqz) Enemies (m.09l2f_) Menace (m.09rrk4) Last Stand (2) (m.09s97h) Summit (1) (m.09s9j9) Ascension (m.09skl_) The Other Guys (m.0h3_chv) Continuum (m.0j86wry) Secrets (m.08mn_j) Window of Opportunity (m.08cz71) Nightwalkers (m.07p75x) Divide and Conquer (m.09k7qr) Upgrades (m.09rb6l) Crossroads (m.09rb89) Threshold (m.09rz91) Moebius (m.07m5cw) Wormhole X-Treme! (m.040sz8) Prophecy (m.07mff0) A Hundred Days (m.08msks) The Fifth Race (m.064pjz) Message In a Bottle (m.07bzrd) Serpent's Song (m.07mc_0) Smoke & Mirrors (m.07mf8w) Legacy (m.07q1lx) Citizen Joe (m.07mck4) Descent (m.07p76y) Talion (m.0g9lkq) Collateral Damage (m.08mlqm) Unending (m.025w7_5) Evolution (1) (m.06yfk9_) Avalon (2) (m.06yfkfg) Avatar (m.07mcnl) The Ties That Bind (m.07mcqn) Paradise Lost (m.07mfb7) Prodigy (m.07syyd) The Scourge (m.0b0fqg) Arthur's Mantle (m.0b0frh) Bounty (m.0djyr6) The Road Not Taken (m.0g0bg6) Family Ties (m.0gxbd7) 2010 (m.06fjz1) Absolute Power (m.0418qm) The Light (m.06fprj) The Other Side (m.09rb45) Bad Guys (m.0g2zpz) Stargate SG-1: True Science (m.0j86wmt) Urgo (m.08mskf) The Powers That Be (m.07mcq_) Company of Thieves (m.0cf278) It's Good to Be King (m.05tsmw) Prometheus Unbound (m.07lqlp) Endgame (m.07mclj) Yesterday, Today and Tomorrow (m.0fyb58) Morpheus (m.0cf21b) Chimera (m.07mdxr) Grace (m.07mdyf) Entity (m.09l1tt) Forever in a Day (m.068zj1) Rules of Engagement (m.08mqwd) Past and Present (m.08mqxs) Dominion (m.025w7z4) Meridian (m.09l1rc) New Ground (m.08msl3) Exodus (m.09l25_) Metamorphosis (m.07mf9k) Orpheus (m.07mf28) Enemy Mine (m.07mf0k) Lifeboat (m.07mf17) Children of the Gods (2) (m.0j86wx1) Reckoning (m.07m568) Beneath the Surface (m.09kcpy) Rite of Passage (m.09skt0) From Stargate To Atlantis - A Sci-Fi Lowdown (m.0j86wk1) Behind The Stargate - Secrets Revealed (m.0j86wlf) Double Jeopardy (m.09h2vc) Evolution (m.07m60_) Sacrifices (m.07mclw) Stargate: The Movie (m.0j86whp) The Ark of Truth (m.0j86wqk) Behind The Mythology of Stargate SG-1 (m.0j86wt9) New Order (2) (m.0j86xpn)
Root Node: Stargate SG-1
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Stargate SG-1, Stargate SG-1: tokens:stargate,sg-1 prob:0.971 score:144974 perfect_match:True]
    ->Relation [name:tv.tv_program.number_of_seasons, tv.tv_program.number_of_seasons:
  RelationName: season=season
  RelationContext: season:0.0890,episode:0.0434,show:0.0103,tell:0.0004
  RelationNameSynonym: season=season:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Stargate SG-1 (m.09kn9)] -> [tv.tv_program.number_of_seasons] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.09kn9 fb:tv.tv_program.number_of_seasons ?0 .
 FILTER (?0 != fb:m.09kn9) 
} LIMIT 300
Result: 10
Root Node: Stargate SG-1
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Stargate SG-1, Stargate SG-1: tokens:stargate,sg-1 prob:0.971 score:144974 perfect_match:True]
    ->Relation [name:tv.tv_program.seasons, tv.tv_program.seasons:
  RelationName: season=season
  RelationContext: season:0.0282,episode:0.0471,show:0.0118,tell:0.0006
  RelationNameSynonym: season=season:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Stargate SG-1 (m.09kn9)] -> [tv.tv_program.seasons] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.09kn9 fb:tv.tv_program.seasons ?0 .
 FILTER (?0 != fb:m.09kn9) 
} LIMIT 300
Result: Stargate SG-1 - Season 9 (m.03m3yjd) Stargate SG-1 - Season 3 (m.03m8lfs) Stargate SG-1 - Season 6 (m.03m8pws) Stargate SG-1 - Season 8 (m.03m3z05) Stargate SG-1 - Season 1 (m.03m8h2t) Stargate SG-1 - Season 2 (m.03m8j45) Stargate SG-1 - Season 4 (m.03m8lx6) Stargate SG-1 - Season 5 (m.03m8mjv) Stargate SG-1 - Season 7 (m.03m8qlt) Stargate SG-1 - Season 10 (m.03m8rmt) Stargate SG-1 - Season 0 (m.0k231q_)
Root Node: Stargate SG-1
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Stargate SG-1, Stargate SG-1: tokens:stargate,sg-1 prob:0.971 score:144974 perfect_match:True]
    ->Relation [name:tv.tv_program.episode_running_time, tv.tv_program.episode_running_time:
  RelationName: episode=episode
  RelationContext: season:0.0068,episode:0.0300,show:0.0097
  RelationNameSynonym: episode=episode:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Stargate SG-1 (m.09kn9)] -> [tv.tv_program.episode_running_time] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.09kn9 fb:tv.tv_program.episode_running_time ?0 .
 FILTER (?0 != fb:m.09kn9) 
} LIMIT 300
Result: 42 43 45 60
Root Node: Stargate SG-1
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Stargate SG-1, Stargate SG-1: tokens:stargate,sg-1 prob:0.971 score:144974 perfect_match:True]
    ->Relation [name:tv.tv_program.number_of_episodes, tv.tv_program.number_of_episodes:
  RelationName: episode=episode
  RelationContext: season:0.0054,episode:0.1669,show:0.0051
  RelationNameSynonym: episode=episode:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Stargate SG-1 (m.09kn9)] -> [tv.tv_program.number_of_episodes] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.09kn9 fb:tv.tv_program.number_of_episodes ?0 .
 FILTER (?0 != fb:m.09kn9) 
} LIMIT 300
Result: 214
Root Node: Stargate SG-1
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Stargate SG-1, Stargate SG-1: tokens:stargate,sg-1 prob:0.971 score:144974 perfect_match:True]
    ->Relation [name:tv.tv_program.multipart_episodes, tv.tv_program.multipart_episodes:
  RelationName: episode=episode
  RelationContext: episode:0.0575,show:0.0063
  RelationNameSynonym: episode=episode:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Stargate SG-1 (m.09kn9)] -> [tv.tv_program.multipart_episodes] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.09kn9 fb:tv.tv_program.multipart_episodes ?0 .
 FILTER (?0 != fb:m.09kn9) 
} LIMIT 300
Result: Within the Serpent's Grasp (m.06yfk3c)

Query: how many beers come a can
Entity: (u'Acan', 0.659340934401, 20, True)
Entity: (u'comEA (Gene) #2', 0.5, 0, True)
Entity: (u'comEA (Gene) #1', 0.5, 0, True)
Entity: (u'Aggrecan', 0.164834983295, 382, False)
Entity: (u'Beer (Beverage type)', 0.820150180697, 62289, False)
TargetType: Other
Root Node: Acan
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Acan, Acan: tokens:a,can prob:0.659 score:20 perfect_match:True]
    ->Relation [name:religion.deity.deity_of, religion.deity.deity_of:
  RelationContext: come:0.0010]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Acan (m.02p0xwc)] -> [religion.deity.deity_of] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.02p0xwc fb:religion.deity.deity_of ?0 .
 FILTER (?0 != fb:m.02p0xwc) 
} LIMIT 30000}
Result: 2
Root Node: Beer (Beverage type)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Beer (Beverage type), Beer (Beverage type): tokens:beers prob:0.820 score:62289 perfect_match:False]
    ->Relation [name:base.schemastaging.food_extra.narrower, base.schemastaging.food_extra.narrower:
  RelationContext: many:0.0008,come:0.0003]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Beer (Beverage type) (m.01599)] -> [base.schemastaging.food_extra.narrower] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.01599 fb:base.schemastaging.food_extra.narrower ?0 .
 FILTER (?0 != fb:m.01599) 
} LIMIT 30000}
Result: 2
Root Node: Beer (Beverage type)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Beer (Beverage type), Beer (Beverage type): tokens:beers prob:0.820 score:62289 perfect_match:False]
    ->Relation [name:base.schemastaging.food_extra.broader, base.schemastaging.food_extra.broader:
  RelationContext: many:0.0008,come:0.0003]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Beer (Beverage type) (m.01599)] -> [base.schemastaging.food_extra.broader] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.01599 fb:base.schemastaging.food_extra.broader ?0 .
 FILTER (?0 != fb:m.01599) 
} LIMIT 30000}
Result: 1
Root Node: comEA (Gene) #1
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:comEA (Gene) #1, comEA (Gene) #1: tokens:come,a prob:0.500 score:0 perfect_match:True]
    ->Relation [name:biology.gene.symbol, biology.gene.symbol:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [comEA (Gene) #1 (m.0rph1qn)] -> [biology.gene.symbol] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.0rph1qn fb:biology.gene.symbol ?0 .
 FILTER (?0 != fb:m.0rph1qn) 
} LIMIT 30000}
Result: 1
Root Node: comEA (Gene) #2
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:comEA (Gene) #2, comEA (Gene) #2: tokens:come,a prob:0.500 score:0 perfect_match:True]
    ->Relation [name:biology.gene.ncbi_id, biology.gene.ncbi_id:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [comEA (Gene) #2 (m.0rdhbhz)] -> [biology.gene.ncbi_id] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.0rdhbhz fb:biology.gene.ncbi_id ?0 .
 FILTER (?0 != fb:m.0rdhbhz) 
} LIMIT 30000}
Result: 1
Root Node: comEA (Gene) #2
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:comEA (Gene) #2, comEA (Gene) #2: tokens:come,a prob:0.500 score:0 perfect_match:True]
    ->Relation [name:biology.gene.symbol, biology.gene.symbol:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [comEA (Gene) #2 (m.0rdhbhz)] -> [biology.gene.symbol] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.0rdhbhz fb:biology.gene.symbol ?0 .
 FILTER (?0 != fb:m.0rdhbhz) 
} LIMIT 30000}
Result: 1

Query: what are the christian holidays
Entity: (u'Liturgical year', 1.0, 30330, False)
Entity: (u'The Christian (Book) #3', 0.443820224719, 79, True)
Entity: (u'The Christian', 0.191011235955, 463, True)
Entity: (u'The Christian', 0.191011235955, 34, True)
Entity: (u'The Christian (Musical Recording) #4', 0.101123595506, 18, True)
Entity: (u'Holiday', 0.458137425129, 581658, False)
Entity: (u'Jewish holiday', 0.197398835787, 32889, False)
Entity: (u'Buddhist holidays', 0.156667734196, 49, False)
TargetType: Other
Query: what are the texts of taoism
Entity: (u'The Texts of Taoism', 1.0, 35, True)
Entity: (u'Texts of Taoism', 0.333333333333, 0, True)
Entity: (u'Texts of Taoism (Volume 2)', 0.333333333333, 0, True)
Entity: (u'Texts of Taoism (Volume 1)', 0.333333333333, 0, True)
Entity: (u'Taoism', 0.982920151219, 399341, True)
Entity: (u'Buddhist texts', 0.400543403998, 11737, False)
Entity: (u'Hindu texts', 0.200380405858, 3294, False)
TargetType: Other
Root Node: The Texts of Taoism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Texts of Taoism, The Texts of Taoism: tokens:the,texts,of,taoism prob:1.000 score:35 perfect_match:True]
    ->Relation [name:book.book.genre, book.book.genre:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Texts of Taoism (m.04wb9ps)] -> [book.book.genre] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.04wb9ps fb:book.book.genre ?0 .
 FILTER (?0 != fb:m.04wb9ps) 
} LIMIT 300
Result: Philosophy (m.037mh8)
Root Node: The Texts of Taoism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Texts of Taoism, The Texts of Taoism: tokens:the,texts,of,taoism prob:1.000 score:35 perfect_match:True]
    ->Relation [name:type.object.name, type.object.name:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Texts of Taoism (m.04wb9ps)] -> [type.object.name] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.04wb9ps fb:type.object.name ?0 .
 FILTER (?0 != fb:m.04wb9ps) 
} LIMIT 300
Result: The Texts of Taoism
Root Node: The Texts of Taoism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Texts of Taoism, The Texts of Taoism: tokens:the,texts,of,taoism prob:1.000 score:35 perfect_match:True]
    ->Relation [name:common.topic.alias, common.topic.alias:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Texts of Taoism (m.04wb9ps)] -> [common.topic.alias] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.04wb9ps fb:common.topic.alias ?0 .
 FILTER (?0 != fb:m.04wb9ps) 
} LIMIT 300
Result: Texts of Taoism
Root Node: The Texts of Taoism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Texts of Taoism, The Texts of Taoism: tokens:the,texts,of,taoism prob:1.000 score:35 perfect_match:True]
    ->Relation [name:book.book.editions, book.book.editions:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Texts of Taoism (m.04wb9ps)] -> [book.book.editions] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.04wb9ps fb:book.book.editions ?0 .
 FILTER (?0 != fb:m.04wb9ps) 
} LIMIT 300
Result: Texts of Taoism (m.08pfyjs) Texts of Taoism (Volume 1) (m.0b2vbnx) Texts of Taoism: The Sacred Books of China (m.08rl0dq) Texts of Taoism (Volume 2) (m.0b2h3mp)
Root Node: The Texts of Taoism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Texts of Taoism, The Texts of Taoism: tokens:the,texts,of,taoism prob:1.000 score:35 perfect_match:True]
    ->Relation [name:book.written_work.author, book.written_work.author:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Texts of Taoism (m.04wb9ps)] -> [book.written_work.author] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.04wb9ps fb:book.written_work.author ?0 .
 FILTER (?0 != fb:m.04wb9ps) 
} LIMIT 300
Result: James Legge (m.021kq9)
Root Node: The Texts of Taoism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Texts of Taoism, The Texts of Taoism: tokens:the,texts,of,taoism prob:1.000 score:35 perfect_match:True]
    ->Relation [name:book.written_work.subjects, book.written_work.subjects:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Texts of Taoism (m.04wb9ps)] -> [book.written_work.subjects] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.04wb9ps fb:book.written_work.subjects ?0 .
 FILTER (?0 != fb:m.04wb9ps) 
} LIMIT 300
Result: Religion (m.06bvp) Taoism (m.07gvx)

Query: in 1982 who were the primetieme emmy award for comedy series nominees
Entity: (u'Award (Chivalric Title)', 1.0, 214152, False)
Entity: (u'Emmy Award', 0.961690893815, 651786, True)
Entity: (u'Television comedy', 0.738231871669, 7963, False)
Entity: (u'1982 FIFA World Cup', 0.71009907012, 2361, False)
Entity: (u'1982 Hama massacre', 0.170949617853, 1527, False)
Entity: (u'1982 Lebanon War', 0.118349788037, 6412, False)
Entity: (u'Resident Evil: Degeneration', 0.410762587684, 6609, False)
Entity: (u'80th Academy Awards', 0.138570825224, 5229, False)
Entity: (u'1982', 0, 0, True)
TargetType: Other
Root Node: 80th Academy Awards
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:80th Academy Awards, 80th Academy Awards: tokens:nominees prob:0.139 score:5229 perfect_match:False]
    ->Relation [name:award.award_ceremony.awards_presented, award.award_ceremony.awards_presented:
  RelationName: award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00]
  Variable [index:0]
    ->Relation [name:award.award_honor.honored_for, award.award_honor.honored_for:
  RelationName: award=award,award=award
  DerivationMatch: award=award,award=award,award=honor,award=honor
  RelationNameSynonym: award=award:1.00,award=honor:0.51,award=honor:0.51]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [80th Academy Awards (m.02pgky2)] -> [award.award_ceremony.awards_presented] -> [?0]
  [?0] -> [award.award_honor.honored_for] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.02pgky2 fb:award.award_ceremony.awards_presented ?0 .
 ?0 fb:award.award_honor.honored_for ?1 .
 FILTER (?1 != fb:m.02pgky2) 
} LIMIT 300
Result: The Golden Compass (m.04w7rn) Juno (m.02rv_dz) Michael Clayton (m.0fh694) There Will Be Blood (m.08zrbl) The Counterfeiters (m.03cgqbr) La Vie en Rose (m.02q6gfp) Falling Slowly (m.03nsp04) Ratatouille (m.03x7hd) Sweeney Todd: The Demon Barber of Fleet Street (m.0ds11z) The Bourne Ultimatum (m.061681) Peter and the Wolf (m.02vpt_d) Elizabeth: The Golden Age (m.03_gz8) No Country for Old Men (m.0b6tzs) Atonement (m.0ctb4g) Le Mozart des pickpockets (m.03qhs4f) Freeheld (m.03qhrvg) Taxi to the Dark Side (m.02qz5kl)
Root Node: 80th Academy Awards
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:80th Academy Awards, 80th Academy Awards: tokens:nominees prob:0.139 score:5229 perfect_match:False]
    ->Relation [name:award.award_ceremony.awards_presented, award.award_ceremony.awards_presented:
  RelationName: award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00]
  Variable [index:0]
    ->Relation [name:award.award_honor.award_winner, award.award_honor.award_winner:
  RelationName: award=award,award=award,award=award
  DerivationMatch: award=award,award=award,award=honor,award=award
  RelationNameSynonym: award=award:1.00,award=honor:0.51,award=award:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [80th Academy Awards (m.02pgky2)] -> [award.award_ceremony.awards_presented] -> [?0]
  [?0] -> [award.award_honor.award_winner] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.02pgky2 fb:award.award_ceremony.awards_presented ?0 .
 ?0 fb:award.award_honor.award_winner ?1 .
 FILTER (?1 != fb:m.02pgky2) 
} LIMIT 300
Result: Alex Gibney (m.0bq4j6) Trevor Wood (m.03nh4j8) Christopher Rouse (m.02854h_) Vanessa Roth (m.05cb7yb) Eva Orner (m.03qj9xn) Joel Coen (m.02kxbx3) Daniel Day-Lewis (m.016yvw) Didier Lavergne (m.03nq_gg) Alexandra Byrne (m.0b_26s) Markéta Irglová (m.0280k1w) David Parker (m.098j9zs) Ethan Coen (m.02kxbwx) Glen Hansard (m.04kxzr) Diablo Cody (m.0gy134) Francesca Lo Schiavo (m.03nq_0f) Cynthia Wade (m.07k8ns7) Dante Ferretti (m.0bytkq) Javier Bardem (m.01713c) Bill Westenhofer (m.02x16n1) Ben Morris (m.03nh4j1) Michael L. Fink (m.0bd6k73) Scott Rudin (m.0fvf9q) Tilda Swinton (m.02f2dn) Scott Millan (m.03qf_rv) Robert Elswit (m.02vx4c2) Philippe Pollet-Villard (m.05cb9h_) Marion Cotillard (m.07lt7b) Dario Marianelli (m.0bmyhb) Per Hallberg (m.02p911r) Karen Baker Landers (m.03nh4mx) Suzie Templeton (m.04lg4h8) Kirk Francis (m.03nh4nc) Jan Archibald (m.03nh4h4) Brad Bird (m.04gcd1) Stefan Ruzowitzky (m.03m7c6m) Hugh Welchman (m.03nh4v5)
Root Node: 80th Academy Awards
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:80th Academy Awards, 80th Academy Awards: tokens:nominees prob:0.139 score:5229 perfect_match:False]
    ->Relation [name:award.award_ceremony.awards_presented, award.award_ceremony.awards_presented:
  RelationName: award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00]
  Variable [index:0]
    ->Relation [name:award.award_honor.award, award.award_honor.award:
  RelationName: award=award,award=award,award=award
  DerivationMatch: award=award,award=award,award=honor,award=award
  RelationNameSynonym: award=award:1.00,award=honor:0.51,award=award:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [80th Academy Awards (m.02pgky2)] -> [award.award_ceremony.awards_presented] -> [?0]
  [?0] -> [award.award_honor.award] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.02pgky2 fb:award.award_ceremony.awards_presented ?0 .
 ?0 fb:award.award_honor.award ?1 .
 FILTER (?1 != fb:m.02pgky2) 
} LIMIT 300
Result: Academy Award for Best Actor (m.0f4x7) Academy Award for Best Art Direction (m.0gq_v) Academy Award for Actress in a Leading Role (m.0gqwc) Academy Award for Actress in a Supporting Role (m.0gqyl) Academy Award for Best Original Song (m.0gqz2) Academy Award for Writing Adapted Screenplay (m.0gr4k) Academy Award for Documentary Feature (m.0gvx_) Academy Award for Best Sound Editing (m.018wdw) Academy Award for Best Picture (m.0gq9h) Academy Award for Best Foreign Language Film (m.0gqng) Academy Award for Best Live Action Short Film (m.0gr07) Academy Award for Best Cinematography (m.0gr0m) Academy Award for Best Director (m.0gs9p) Academy Award for Film Editing (m.0k611) Academy Award for Sound Mixing (m.0p9sw) Academy Award for Original Music Score (m.0l8z1) Academy Award for Costume Design (m.0gs96) Academy Award for Best Documentary Short Subject (m.018wng) Academy Award for  Actor in a Supporting Role (m.0gqy2) Academy Award for Best Original Screenplay (m.0gr51) Academy Award for Animated Short Film (m.0gq_d) Academy Award for Visual Effects (m.0gr42) Academy Award for  Animated Feature Film (m.0gqzz) Academy Award for Makeup (m.0gqxm)
Root Node: 80th Academy Awards
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:80th Academy Awards, 80th Academy Awards: tokens:nominees prob:0.139 score:5229 perfect_match:False]
    ->Relation [name:award.award_ceremony.awards_presented, award.award_ceremony.awards_presented:
  RelationName: award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00]
  Variable [index:0]
    ->Relation [name:award.award_honor.notes_description, award.award_honor.notes_description:
  RelationName: award=award,award=award
  DerivationMatch: award=award,award=award,award=honor
  RelationNameSynonym: award=award:1.00,award=honor:0.51]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [80th Academy Awards (m.02pgky2)] -> [award.award_ceremony.awards_presented] -> [?0]
  [?0] -> [award.award_honor.notes_description] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.02pgky2 fb:award.award_ceremony.awards_presented ?0 .
 ?0 fb:award.award_honor.notes_description ?1 .
 FILTER (?1 != fb:m.02pgky2) 
} LIMIT 300
Result: Role: Daniel Plainview Role:  Anton Chigurh Once Country: Austria; in German, Russian, English, Hebrew Role:  Karen Crowder Role: Edith Piaf
Root Node: 80th Academy Awards
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:80th Academy Awards, 80th Academy Awards: tokens:nominees prob:0.139 score:5229 perfect_match:False]
    ->Relation [name:award.award_ceremony.awards_presented, award.award_ceremony.awards_presented:
  RelationName: award=award,award=award,award=award
  RelationNameSynonym: award=award:1.00,award=award:1.00]
  Variable [index:0]
    ->Relation [name:award.award_honor.year, award.award_honor.year:
  RelationName: award=award,award=award
  DerivationMatch: award=award,award=award,award=honor
  RelationNameSynonym: award=award:1.00,award=honor:0.51]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [80th Academy Awards (m.02pgky2)] -> [award.award_ceremony.awards_presented] -> [?0]
  [?0] -> [award.award_honor.year] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.02pgky2 fb:award.award_ceremony.awards_presented ?0 .
 ?0 fb:award.award_honor.year ?1 .
 FILTER (?1 != fb:m.02pgky2) 
} LIMIT 300
Result: 2007
Root Node: 80th Academy Awards
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:80th Academy Awards, 80th Academy Awards: tokens:nominees prob:0.139 score:5229 perfect_match:False]
    ->Relation [name:award.award_ceremony.awards_presented, award.award_ceremony.awards_presented -> award.award_honor.award:
  RelationName: award=award,award=award,award=award,award=award,award=award,award=award
  DerivationMatch: award=award,award=award,award=award,award=award,award=award,award=honor,award=award
  RelationContext: comedy:0.0045,emmy:0.0010,award:0.0331,series:0.0035
  RelationNameSynonym: award=award:1.00,award=award:1.00,award=award:1.00,award=honor:0.51,award=award:1.00]
  Variable [index:0]
    ->Relation [name:award.award_honor.award, award.award_ceremony.awards_presented -> award.award_honor.award:
  RelationName: award=award,award=award,award=award,award=award,award=award,award=award
  DerivationMatch: award=award,award=award,award=award,award=award,award=award,award=honor,award=award
  RelationContext: comedy:0.0045,emmy:0.0010,award:0.0331,series:0.0035
  RelationNameSynonym: award=award:1.00,award=award:1.00,award=award:1.00,award=honor:0.51,award=award:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [80th Academy Awards (m.02pgky2)] -> [award.award_ceremony.awards_presented] -> [?0]
  [?0] -> [award.award_honor.award] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.02pgky2 fb:award.award_ceremony.awards_presented ?0 .
 ?0 fb:award.award_honor.award ?1 .
 FILTER (?1 != fb:m.02pgky2) 
} LIMIT 300
Result: Academy Award for Best Actor (m.0f4x7) Academy Award for Best Art Direction (m.0gq_v) Academy Award for Actress in a Leading Role (m.0gqwc) Academy Award for Actress in a Supporting Role (m.0gqyl) Academy Award for Best Original Song (m.0gqz2) Academy Award for Writing Adapted Screenplay (m.0gr4k) Academy Award for Documentary Feature (m.0gvx_) Academy Award for Best Sound Editing (m.018wdw) Academy Award for Best Picture (m.0gq9h) Academy Award for Best Foreign Language Film (m.0gqng) Academy Award for Best Live Action Short Film (m.0gr07) Academy Award for Best Cinematography (m.0gr0m) Academy Award for Best Director (m.0gs9p) Academy Award for Film Editing (m.0k611) Academy Award for Sound Mixing (m.0p9sw) Academy Award for Original Music Score (m.0l8z1) Academy Award for Costume Design (m.0gs96) Academy Award for Best Documentary Short Subject (m.018wng) Academy Award for  Actor in a Supporting Role (m.0gqy2) Academy Award for Best Original Screenplay (m.0gr51) Academy Award for Animated Short Film (m.0gq_d) Academy Award for Visual Effects (m.0gr42) Academy Award for  Animated Feature Film (m.0gqzz) Academy Award for Makeup (m.0gqxm)

Query: what year was the album decade released
Entity: (u'The Album', 0.242627058026, 531, True)
Entity: (u'Album (m/02lx2r)', 0.924086966045, 118924, True)
Entity: (u'Year', 0.708396384259, 1064748, True)
Entity: (u'Decade (Unit of frequency)', 0.566263388268, 15554, True)
Entity: (u'Year', 0.244091331527, 366879, True)
Entity: (u'Fin de si\xe8cle', 0.146565609253, 923, False)
Entity: (u'Decade (Rock Album)', 0.128339579923, 48, True)
TargetType: Date
Root Node: The Album
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Album, The Album: tokens:the,album prob:0.243 score:531 perfect_match:True]
    ->Relation [name:music.album.release_date, music.album.release_date:
  RelationName: release=release
  DerivationMatch: release=release
  RelationContext: release:0.1666,year:0.0006,decade:0.0001
  RelationNameSynonym: release=release:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Album (m.01hnjdn)] -> [music.album.release_date] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01hnjdn fb:music.album.release_date ?0 .
 FILTER (?0 != fb:m.01hnjdn) 
} LIMIT 300
Result: 1977-12-12
Root Node: Decade (Rock Album)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Decade (Rock Album), Decade (Rock Album): tokens:decade prob:0.128 score:48 perfect_match:True]
    ->Relation [name:music.album.release_date, music.album.release_date:
  RelationName: release=release,album=album
  DerivationMatch: release=release
  RelationContext: year:0.0006,release:0.1666,album:0.1688
  RelationNameSynonym: release=release:1.00,album=album:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Decade (Rock Album) (m.02967)] -> [music.album.release_date] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02967 fb:music.album.release_date ?0 .
 FILTER (?0 != fb:m.02967) 
} LIMIT 300
Result: 1977-10-28
Root Node: Decade (Rock Album)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Decade (Rock Album), Decade (Rock Album): tokens:decade prob:0.128 score:48 perfect_match:True]
    ->Relation [name:music.album.release_type, music.album.release_type:
  RelationName: release=release,album=album
  DerivationMatch: release=release
  RelationContext: year:0.0029,release:0.0765,album:0.0225
  RelationNameSynonym: release=release:1.00,album=album:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Decade (Rock Album) (m.02967)] -> [music.album.release_type] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02967 fb:music.album.release_type ?0 .
 FILTER (?0 != fb:m.02967) 
} LIMIT 300
Result: Album (m.02lx2r)
Root Node: Decade (Rock Album)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Decade (Rock Album), Decade (Rock Album): tokens:decade prob:0.128 score:48 perfect_match:True]
    ->Relation [name:music.album.primary_release, music.album.primary_release:
  RelationName: release=release,album=album
  DerivationMatch: release=release
  RelationContext: release:0.0142,album:0.0704
  RelationNameSynonym: release=release:1.00,album=album:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Decade (Rock Album) (m.02967)] -> [music.album.primary_release] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02967 fb:music.album.primary_release ?0 .
 FILTER (?0 != fb:m.02967) 
} LIMIT 300
Result: Decade (m.03_sty2)
Root Node: Decade (Rock Album)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Decade (Rock Album), Decade (Rock Album): tokens:decade prob:0.128 score:48 perfect_match:True]
    ->Relation [name:music.album.releases, music.album.releases:
  RelationName: release=release,album=album
  DerivationMatch: release=release
  RelationContext: release:0.0236,album:0.0779
  RelationNameSynonym: release=release:1.00,album=album:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Decade (Rock Album) (m.02967)] -> [music.album.releases] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02967 fb:music.album.releases ?0 .
 FILTER (?0 != fb:m.02967) 
} LIMIT 300
Result: Decade (m.03_sty2) Decade (m.03_sv0k) Decade (m.0npf7wl)
Root Node: The Album
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Album, The Album: tokens:the,album prob:0.243 score:531 perfect_match:True]
    ->Relation [name:music.album.releases, music.album.releases:
  RelationName: release=release
  DerivationMatch: release=release
  RelationContext: release:0.0236
  RelationNameSynonym: release=release:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Album (m.01hnjdn)] -> [music.album.releases] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01hnjdn fb:music.album.releases ?0 .
 FILTER (?0 != fb:m.01hnjdn) 
} LIMIT 300
Result: The Album (m.0qckylm) The Album (m.0gbjdf0) The Album (m.0dy12bg) The Album (m.0nscg43) The Album (m.01hnjcs) The Album (m.031ggxv) The Album (m.0f5_lzz) The Album (m.0f60hyy) The Album (m.0ft5cz6) The Album (m.0fthqrz) The Album (m.0nrvmv1) ABBA: The Album (m.0vyd1h8)

Query: how many countries are in south america
Entity: (u'In South America (Gramophone record Musical Release)', 0.366459568149, 0, True)
Entity: (u'In South America (Musical Album)', 0.366459568149, 0, True)
Entity: (u'South America', 0.959975493807, 3896540, True)
Entity: (u'United Nations Framework Convention on Climate Change', 0.217686725545, 327658, False)
Entity: (u'Blasphemy law', 0.200680504161, 3058, False)
Entity: (u"International Women's Day", 0.159864154474, 1136796, False)
Entity: (u'Country (Quotation Subject)', 0.840984198953, 97485, False)
TargetType: Other
Root Node: In South America (Musical Album)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:In South America (Musical Album), In South America (Musical Album): tokens:in,south,america prob:0.366 score:0 perfect_match:True]
    ->Relation [name:music.album.release_type, music.album.release_type:
  RelationContext: many:0.0006,country:0.0003]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [In South America (Musical Album) (m.0q8f6wp)] -> [music.album.release_type] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.0q8f6wp fb:music.album.release_type ?0 .
 FILTER (?0 != fb:m.0q8f6wp) 
} LIMIT 30000}
Result: 1
Root Node: In South America (Gramophone record Musical Release)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:In South America (Gramophone record Musical Release), In South America (Gramophone record Musical Release): tokens:in,south,america prob:0.366 score:0 perfect_match:True]
    ->Relation [name:music.release.format, music.release.format:
  RelationContext: many:0.0064]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [In South America (Gramophone record Musical Release) (m.0q9kbfc)] -> [music.release.format] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.0q9kbfc fb:music.release.format ?0 .
 FILTER (?0 != fb:m.0q9kbfc) 
} LIMIT 30000}
Result: 1
Root Node: In South America (Gramophone record Musical Release)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:In South America (Gramophone record Musical Release), In South America (Gramophone record Musical Release): tokens:in,south,america prob:0.366 score:0 perfect_match:True]
    ->Relation [name:music.release.region, music.release.region:
  RelationNameSynonym: country=region:0.60]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [In South America (Gramophone record Musical Release) (m.0q9kbfc)] -> [music.release.region] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.0q9kbfc fb:music.release.region ?0 .
 FILTER (?0 != fb:m.0q9kbfc) 
} LIMIT 30000}
Result: 1
Root Node: In South America (Gramophone record Musical Release)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:In South America (Gramophone record Musical Release), In South America (Gramophone record Musical Release): tokens:in,south,america prob:0.366 score:0 perfect_match:True]
    ->Relation [name:music.release.catalog_number, music.release.catalog_number:
  RelationNameSynonym: many=number:0.50]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [In South America (Gramophone record Musical Release) (m.0q9kbfc)] -> [music.release.catalog_number] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.0q9kbfc fb:music.release.catalog_number ?0 .
 FILTER (?0 != fb:m.0q9kbfc) 
} LIMIT 30000}
Result: 1
Root Node: In South America (Musical Album)
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:In South America (Musical Album), In South America (Musical Album): tokens:in,south,america prob:0.366 score:0 perfect_match:True]
    ->Relation [name:music.album.artist, music.album.artist:
  RelationContext: many:0.0002,country:0.0008]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [In South America (Musical Album) (m.0q8f6wp)] -> [music.album.artist] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.0q8f6wp fb:music.album.artist ?0 .
 FILTER (?0 != fb:m.0q8f6wp) 
} LIMIT 30000}
Result: 1
Root Node: South America
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:South America, South America: tokens:south,america prob:0.960 score:3896540 perfect_match:True]
    ->Relation [name:location.location.contains_major_portion_of, location.location.contains_major_portion_of:
  RelationContext: many:0.0012,country:0.0099]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [South America (m.06n3y)] -> [location.location.contains_major_portion_of] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.06n3y fb:location.location.contains_major_portion_of ?0 .
 FILTER (?0 != fb:m.06n3y) 
} LIMIT 30000}
Result: 1

Query: what area did the meiji constitution govern
Entity: (u'The Meiji Constitution', 1.0, 0, True)
Entity: (u'Emperor Meiji', 1.0, 8934, False)
Entity: (u'Meiji Constitution', 0.987831850544, 2077, True)
Entity: (u'Area', 0.850698126258, 76568, True)
TargetType: Other
Root Node: Emperor Meiji
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Emperor Meiji, Emperor Meiji: tokens:the,meiji prob:1.000 score:8934 perfect_match:False]
    ->Relation [name:royalty.monarch.kingdom, royalty.monarch.kingdom:
  RelationContext: constitution:0.0008,govern:0.0005,area:0.0005]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Emperor Meiji (m.01bsgq)] -> [royalty.monarch.kingdom] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01bsgq fb:royalty.monarch.kingdom ?0 .
 FILTER (?0 != fb:m.01bsgq) 
} LIMIT 300
Result: Japan (m.03_3d)
Root Node: The Meiji Constitution
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Meiji Constitution, The Meiji Constitution: tokens:the,meiji,constitution prob:1.000 score:0 perfect_match:True]
    ->Relation [name:book.written_work.author, book.written_work.author:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Meiji Constitution (m.0c3v6d6)] -> [book.written_work.author] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0c3v6d6 fb:book.written_work.author ?0 .
 FILTER (?0 != fb:m.0c3v6d6) 
} LIMIT 300
Result: Kazuhiro Takii (m.0c3v6cz)
Root Node: Meiji Constitution
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Meiji Constitution, Meiji Constitution: tokens:meiji,constitution prob:0.988 score:2077 perfect_match:True]
    ->Relation [name:law.constitution.country, law.constitution.country:
  RelationContext: govern:0.0091
  RelationNameSynonym: govern=constitution:0.40]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Meiji Constitution (m.01_syn)] -> [law.constitution.country] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01_syn fb:law.constitution.country ?0 .
 FILTER (?0 != fb:m.01_syn) 
} LIMIT 300
Result: Japan (m.03_3d)
Root Node: The Meiji Constitution
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Meiji Constitution, The Meiji Constitution: tokens:the,meiji,constitution prob:1.000 score:0 perfect_match:True]
    ->Relation [name:type.object.name, type.object.name:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Meiji Constitution (m.0c3v6d6)] -> [type.object.name] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0c3v6d6 fb:type.object.name ?0 .
 FILTER (?0 != fb:m.0c3v6d6) 
} LIMIT 300
Result: The Meiji Constitution
Root Node: The Meiji Constitution
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Meiji Constitution, The Meiji Constitution: tokens:the,meiji,constitution prob:1.000 score:0 perfect_match:True]
    ->Relation [name:book.book.editions, book.book.editions:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Meiji Constitution (m.0c3v6d6)] -> [book.book.editions] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0c3v6d6 fb:book.book.editions ?0 .
 FILTER (?0 != fb:m.0c3v6d6) 
} LIMIT 300
Result: The Meiji Constitution : the Japanese experience of the West and the shaping of the modern state (m.0c94xnf)
Root Node: Emperor Meiji
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Emperor Meiji, Emperor Meiji: tokens:the,meiji prob:1.000 score:8934 perfect_match:False]
    ->Relation [name:royalty.monarch.royal_line, royalty.monarch.royal_line:
  RelationContext: area:0.0004]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Emperor Meiji (m.01bsgq)] -> [royalty.monarch.royal_line] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01bsgq fb:royalty.monarch.royal_line ?0 .
 FILTER (?0 != fb:m.01bsgq) 
} LIMIT 300
Result: Imperial House of Japan (m.08x9pc)

Query: what is the collection of postcards called
Entity: (u'The Collection (Funk Album)', 0.108681689217, 251, True)
Entity: (u'Postcard', 0.801281284561, 23099, False)
Entity: (u'Collection (Organisation sector)', 0.137579251692, 14554, True)
Entity: (u'Collection', 0.11959893317, 518, True)
TargetType: Other
Root Node: Postcard
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Postcard, Postcard: tokens:postcards prob:0.801 score:23099 perfect_match:False]
    ->Relation [name:interests.collection_category.collectors, interests.collection_category.collectors:
  RelationName: collection=collection
  RelationNameSynonym: collection=collection:1.00,collection=collector:0.53]
  Variable [index:0]
    ->Relation [name:interests.collection.collector, interests.collection.collector:
  RelationName: collection=collection
  RelationNameSynonym: collection=collection:1.00,collection=collector:0.53]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Postcard (m.0fd4f)] -> [interests.collection_category.collectors] -> [?0]
  [?0] -> [interests.collection.collector] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0fd4f fb:interests.collection_category.collectors ?0 .
 ?0 fb:interests.collection.collector ?1 .
 FILTER (?1 != fb:m.0fd4f) 
} LIMIT 300
Result: Chris Webber (m.02l_4s)
Root Node: Postcard
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Postcard, Postcard: tokens:postcards prob:0.801 score:23099 perfect_match:False]
    ->Relation [name:interests.collection_category.name_of_collection_activity, interests.collection_category.name_of_collection_activity:
  RelationName: collection=collection,collection=collection
  RelationContext: call:0.0025
  RelationNameSynonym: collection=collection:1.00,collection=collection:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Postcard (m.0fd4f)] -> [interests.collection_category.name_of_collection_activity] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0fd4f fb:interests.collection_category.name_of_collection_activity ?0 .
 FILTER (?0 != fb:m.0fd4f) 
} LIMIT 300
Result: Deltiology (m.09q4qb)
Root Node: Postcard
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Postcard, Postcard: tokens:postcards prob:0.801 score:23099 perfect_match:False]
    ->Relation [name:interests.collection_category.collectors, interests.collection_category.collectors -> interests.collection.items:
  RelationName: collection=collection,collection=collection
  RelationNameSynonym: collection=collection:1.00,collection=collector:0.53,collection=collection:1.00]
  Variable [index:0]
    ->Relation [name:interests.collection.items, interests.collection_category.collectors -> interests.collection.items:
  RelationName: collection=collection,collection=collection
  RelationNameSynonym: collection=collection:1.00,collection=collector:0.53,collection=collection:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Postcard (m.0fd4f)] -> [interests.collection_category.collectors] -> [?0]
  [?0] -> [interests.collection.items] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0fd4f fb:interests.collection_category.collectors ?0 .
 ?0 fb:interests.collection.items ?1 .
 FILTER (?1 != fb:m.0fd4f) 
} LIMIT 300
Result: 
Root Node: Postcard
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Postcard, Postcard: tokens:postcards prob:0.801 score:23099 perfect_match:False]
    ->Relation [name:visual_art.visual_art_support.artworks, visual_art.visual_art_support.artworks:
  RelationNameSynonym: collection=artworks:0.41]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Postcard (m.0fd4f)] -> [visual_art.visual_art_support.artworks] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0fd4f fb:visual_art.visual_art_support.artworks ?0 .
 FILTER (?0 != fb:m.0fd4f) 
} LIMIT 300
Result: Landscape Near Figueras (m.0d1wzv)

Query: how was pluto discovered
Entity: (u'Pluto', 0.641672151936, 513041, True)
Entity: (u'Pluto (Film character) #3', 0.123765069373, 20041, True)
TargetType: Other
Root Node: Pluto
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Pluto, Pluto: tokens:pluto prob:0.642 score:513041 perfect_match:True]
    ->Relation [name:astronomy.astronomical_discovery.discovery_organization, astronomy.astronomical_discovery.discovery_organization:
  RelationName: discover=discovery,discover=discovery
  DerivationMatch: discover=discovery,discover=discovery
  RelationContext: discover:0.1337
  RelationNameSynonym: discover=discovery:0.48,discover=discovery:0.48]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Pluto (m.0c3qy)] -> [astronomy.astronomical_discovery.discovery_organization] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0c3qy fb:astronomy.astronomical_discovery.discovery_organization ?0 .
 FILTER (?0 != fb:m.0c3qy) 
} LIMIT 300
Result: Lowell Observatory (m.0kyyk)
Root Node: Pluto
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Pluto, Pluto: tokens:pluto prob:0.642 score:513041 perfect_match:True]
    ->Relation [name:astronomy.astronomical_discovery.discoverer, astronomy.astronomical_discovery.discoverer:
  RelationName: discover=discovery,discover=discoverer
  DerivationMatch: discover=discovery,discover=discoverer
  RelationContext: discover:0.1120
  RelationNameSynonym: discover=discovery:0.48]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Pluto (m.0c3qy)] -> [astronomy.astronomical_discovery.discoverer] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0c3qy fb:astronomy.astronomical_discovery.discoverer ?0 .
 FILTER (?0 != fb:m.0c3qy) 
} LIMIT 300
Result: Clyde Tombaugh (m.01ylz)
Root Node: Pluto
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Pluto, Pluto: tokens:pluto prob:0.642 score:513041 perfect_match:True]
    ->Relation [name:astronomy.astronomical_discovery.discovery_site, astronomy.astronomical_discovery.discovery_site:
  RelationName: discover=discovery,discover=discovery
  DerivationMatch: discover=discovery,discover=discovery
  RelationContext: discover:0.0979
  RelationNameSynonym: discover=discovery:0.48,discover=discovery:0.48]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Pluto (m.0c3qy)] -> [astronomy.astronomical_discovery.discovery_site] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0c3qy fb:astronomy.astronomical_discovery.discovery_site ?0 .
 FILTER (?0 != fb:m.0c3qy) 
} LIMIT 300
Result: Lowell Observatory (m.0kyyk)
Root Node: Pluto
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Pluto, Pluto: tokens:pluto prob:0.642 score:513041 perfect_match:True]
    ->Relation [name:astronomy.astronomical_discovery.discovery_technique, astronomy.astronomical_discovery.discovery_technique:
  RelationName: discover=discovery,discover=discovery
  DerivationMatch: discover=discovery,discover=discovery
  RelationContext: discover:0.0501
  RelationNameSynonym: discover=discovery:0.48,discover=discovery:0.48]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Pluto (m.0c3qy)] -> [astronomy.astronomical_discovery.discovery_technique] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0c3qy fb:astronomy.astronomical_discovery.discovery_technique ?0 .
 FILTER (?0 != fb:m.0c3qy) 
} LIMIT 300
Result: Image differencing (m.07lqp5) Mathematical prediction (m.05v3ykx)
Root Node: Pluto
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Pluto, Pluto: tokens:pluto prob:0.642 score:513041 perfect_match:True]
    ->Relation [name:astronomy.astronomical_discovery.discovery_date, astronomy.astronomical_discovery.discovery_date:
  RelationName: discover=discovery,discover=discovery
  DerivationMatch: discover=discovery,discover=discovery
  RelationContext: discover:0.1849
  RelationNameSynonym: discover=discovery:0.48,discover=discovery:0.48]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Pluto (m.0c3qy)] -> [astronomy.astronomical_discovery.discovery_date] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0c3qy fb:astronomy.astronomical_discovery.discovery_date ?0 .
 FILTER (?0 != fb:m.0c3qy) 
} LIMIT 300
Result: 1930-02-18
Root Node: Pluto
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Pluto, Pluto: tokens:pluto prob:0.642 score:513041 perfect_match:True]
    ->Relation [name:astronomy.trans_neptunian_object.region, astronomy.trans_neptunian_object.region:
  RelationContext: discover:0.0212]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Pluto (m.0c3qy)] -> [astronomy.trans_neptunian_object.region] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0c3qy fb:astronomy.trans_neptunian_object.region ?0 .
 FILTER (?0 != fb:m.0c3qy) 
} LIMIT 300
Result: Kuiper belt (m.048w_)

Query: how many people practice buddhism
Entity: (u'Unforgettable (Composition) #374', 0.554217247046, 92, False)
Entity: (u"Medbury's-Grove Lawn Subdivisions Historic District", 0.126505920011, 0, False)
Entity: (u'Buddhism', 0.958841007958, 3064402, True)
Entity: (u'People', 0.370274503777, 228405, True)
Entity: (u'Practice', 0.339400323183, 30524, True)
Entity: (u'People (Quotation Subject)', 0.222445557315, 941, True)
Entity: (u'Praxis', 0.153781107459, 3103, False)
TargetType: Other
Root Node: Buddhism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Buddhism, Buddhism: tokens:buddhism prob:0.959 score:3064402 perfect_match:True]
    ->Relation [name:religion.religion.practices, religion.religion.practices:
  RelationName: practice=practice
  DerivationMatch: practice=practice
  RelationContext: many:0.0004,practice:0.0104
  RelationNameSynonym: practice=practice:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Buddhism (m.092bf5)] -> [religion.religion.practices] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.092bf5 fb:religion.religion.practices ?0 .
 FILTER (?0 != fb:m.092bf5) 
} LIMIT 30000}
Result: 9
Root Node: Buddhism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Buddhism, Buddhism: tokens:buddhism prob:0.959 score:3064402 perfect_match:True]
    ->Relation [name:religion.religion.organizations, religion.religion.organizations:
  RelationContext: people:0.0007,many:0.0012,practice:0.0063]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Buddhism (m.092bf5)] -> [religion.religion.organizations] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.092bf5 fb:religion.religion.organizations ?0 .
 FILTER (?0 != fb:m.092bf5) 
} LIMIT 30000}
Result: 5
Root Node: Buddhism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Buddhism, Buddhism: tokens:buddhism prob:0.959 score:3064402 perfect_match:True]
    ->Relation [name:book.book_subject.works, book.book_subject.works:
  RelationContext: people:0.0011,many:0.0009,practice:0.0006]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Buddhism (m.092bf5)] -> [book.book_subject.works] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.092bf5 fb:book.book_subject.works ?0 .
 FILTER (?0 != fb:m.092bf5) 
} LIMIT 30000}
Result: 98
Root Node: Buddhism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Buddhism, Buddhism: tokens:buddhism prob:0.959 score:3064402 perfect_match:True]
    ->Relation [name:religion.religion.is_part_of, religion.religion.is_part_of:
  RelationContext: people:0.0002,many:0.0013,practice:0.0037]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Buddhism (m.092bf5)] -> [religion.religion.is_part_of] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.092bf5 fb:religion.religion.is_part_of ?0 .
 FILTER (?0 != fb:m.092bf5) 
} LIMIT 30000}
Result: 1
Root Node: Buddhism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Buddhism, Buddhism: tokens:buddhism prob:0.959 score:3064402 perfect_match:True]
    ->Relation [name:religion.religion.includes, religion.religion.includes:
  RelationContext: people:0.0002,many:0.0013,practice:0.0037]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Buddhism (m.092bf5)] -> [religion.religion.includes] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.092bf5 fb:religion.religion.includes ?0 .
 FILTER (?0 != fb:m.092bf5) 
} LIMIT 30000}
Result: 8
Root Node: Buddhism
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Buddhism, Buddhism: tokens:buddhism prob:0.959 score:3064402 perfect_match:True]
    ->Relation [name:religion.religion.texts, religion.religion.texts:
  RelationContext: people:0.0005,many:0.0009,practice:0.0020]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Buddhism (m.092bf5)] -> [religion.religion.texts] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.092bf5 fb:religion.religion.texts ?0 .
 FILTER (?0 != fb:m.092bf5) 
} LIMIT 30000}
Result: 12

Query: how many students are there at the university of iceland
Entity: (u'University of Iceland', 1.0, 10491, True)
Entity: (u'University of Iceland', 1.0, 10491, True)
Entity: (u'Conservation status', 1.0, 766, False)
Entity: (u'Wesleyan University', 0.369864400705, 72582, False)
Entity: (u'University of Michigan', 0.167597785362, 1011854, False)
Entity: (u'University of California, Berkeley', 0.128491695109, 1709617, False)
Entity: (u'University of Oxford', 0.125910935291, 553135, False)
Entity: (u'University of Virginia', 0.111731856908, 685995, False)
Entity: (u'Uppsala University', 0.102302620021, 52141, False)
Entity: (u'Student', 0.923982877027, 95407, False)
Entity: (u'University', 0.790236592261, 1631423, True)
Entity: (u'Iceland', 0.74242798662, 1742658, True)
Entity: (u'Iceland national football team', 0.100369570192, 576, False)
TargetType: Other
Root Node: University of Iceland
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:University of Iceland, University of Iceland: tokens:the,university,of,iceland prob:1.000 score:10491 perfect_match:True]
    ->Relation [name:education.educational_institution.students_graduates, education.educational_institution.students_graduates:
  RelationName: student=student
  RelationNameSynonym: student=student:1.00,student=graduate:0.54]
  Variable [index:0]
    ->Relation [name:education.education.student, education.education.student:
  RelationName: student=student
  RelationNameSynonym: student=education:0.40,student=student:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [University of Iceland (m.022hyn)] -> [education.educational_institution.students_graduates] -> [?0]
  [?0] -> [education.education.student] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.022hyn fb:education.educational_institution.students_graduates ?0 .
 ?0 fb:education.education.student ?1 .
 FILTER (?1 != fb:m.022hyn) 
} LIMIT 30000}
Result: 56
Root Node: University of Iceland
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:University of Iceland, University of Iceland: tokens:the,university,of,iceland prob:1.000 score:10491 perfect_match:True]
    ->Relation [name:education.educational_institution.students_graduates, education.educational_institution.students_graduates -> education.education.student:
  RelationName: student=student,student=student
  RelationContext: many:0.0001,student:0.0046
  RelationNameSynonym: student=student:1.00,student=graduate:0.54,student=education:0.40,student=student:1.00]
  Variable [index:0]
    ->Relation [name:education.education.student, education.educational_institution.students_graduates -> education.education.student:
  RelationName: student=student,student=student
  RelationContext: many:0.0001,student:0.0046
  RelationNameSynonym: student=student:1.00,student=graduate:0.54,student=education:0.40,student=student:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [University of Iceland (m.022hyn)] -> [education.educational_institution.students_graduates] -> [?0]
  [?0] -> [education.education.student] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.022hyn fb:education.educational_institution.students_graduates ?0 .
 ?0 fb:education.education.student ?1 .
 FILTER (?1 != fb:m.022hyn) 
} LIMIT 30000}
Result: 56
Root Node: University of Iceland
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:University of Iceland, University of Iceland: tokens:the,university,of,iceland prob:1.000 score:10491 perfect_match:True]
    ->Relation [name:education.educational_institution.students_graduates, education.educational_institution.students_graduates -> education.education.major_field_of_study:
  RelationName: student=student
  DerivationMatch: student=study
  RelationContext: many:0.0001,student:0.0013
  RelationNameSynonym: student=student:1.00,student=graduate:0.54,student=education:0.40]
  Variable [index:0]
    ->Relation [name:education.education.major_field_of_study, education.educational_institution.students_graduates -> education.education.major_field_of_study:
  RelationName: student=student
  DerivationMatch: student=study
  RelationContext: many:0.0001,student:0.0013
  RelationNameSynonym: student=student:1.00,student=graduate:0.54,student=education:0.40]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [University of Iceland (m.022hyn)] -> [education.educational_institution.students_graduates] -> [?0]
  [?0] -> [education.education.major_field_of_study] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.022hyn fb:education.educational_institution.students_graduates ?0 .
 ?0 fb:education.education.major_field_of_study ?1 .
 FILTER (?1 != fb:m.022hyn) 
} LIMIT 30000}
Result: 1
Root Node: University of Iceland
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:University of Iceland, University of Iceland: tokens:the,university,of,iceland prob:1.000 score:10491 perfect_match:True]
    ->Relation [name:education.educational_institution.students_graduates, education.educational_institution.students_graduates -> people.deceased_person.place_of_death:
  RelationName: student=student
  RelationContext: student:0.0044
  RelationNameSynonym: student=student:1.00,student=graduate:0.54]
  Variable [index:0]
    ->Relation [name:people.deceased_person.place_of_death, education.educational_institution.students_graduates -> people.deceased_person.place_of_death:
  RelationName: student=student
  RelationContext: student:0.0044
  RelationNameSynonym: student=student:1.00,student=graduate:0.54]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [University of Iceland (m.022hyn)] -> [education.educational_institution.students_graduates] -> [?0]
  [?0] -> [people.deceased_person.place_of_death] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.022hyn fb:education.educational_institution.students_graduates ?0 .
 ?0 fb:people.deceased_person.place_of_death ?1 .
 FILTER (?1 != fb:m.022hyn) 
} LIMIT 30000}
Result: 0
Root Node: University of Iceland
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:University of Iceland, University of Iceland: tokens:the,university,of,iceland prob:1.000 score:10491 perfect_match:True]
    ->Relation [name:education.educational_institution.students_graduates, education.educational_institution.students_graduates -> people.person.nationality:
  RelationName: student=student
  RelationContext: student:0.0052
  RelationNameSynonym: student=student:1.00,student=graduate:0.54]
  Variable [index:0]
    ->Relation [name:people.person.nationality, education.educational_institution.students_graduates -> people.person.nationality:
  RelationName: student=student
  RelationContext: student:0.0052
  RelationNameSynonym: student=student:1.00,student=graduate:0.54]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [University of Iceland (m.022hyn)] -> [education.educational_institution.students_graduates] -> [?0]
  [?0] -> [people.person.nationality] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.022hyn fb:education.educational_institution.students_graduates ?0 .
 ?0 fb:people.person.nationality ?1 .
 FILTER (?1 != fb:m.022hyn) 
} LIMIT 30000}
Result: 0
Root Node: University of Iceland
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:University of Iceland, University of Iceland: tokens:the,university,of,iceland prob:1.000 score:10491 perfect_match:True]
    ->Relation [name:education.educational_institution.students_graduates, education.educational_institution.students_graduates -> people.person.place_of_birth:
  RelationName: student=student
  RelationNameSynonym: student=student:1.00,student=graduate:0.54]
  Variable [index:0]
    ->Relation [name:people.person.place_of_birth, education.educational_institution.students_graduates -> people.person.place_of_birth:
  RelationName: student=student
  RelationNameSynonym: student=student:1.00,student=graduate:0.54]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [University of Iceland (m.022hyn)] -> [education.educational_institution.students_graduates] -> [?0]
  [?0] -> [people.person.place_of_birth] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.022hyn fb:education.educational_institution.students_graduates ?0 .
 ?0 fb:people.person.place_of_birth ?1 .
 FILTER (?1 != fb:m.022hyn) 
} LIMIT 30000}
Result: 0

Query: how many libretti did wagner write
Entity: (u'Libretto', 0.998252922994, 14856, False)
Entity: (u'Richard Wagner', 0.720335255032, 448189, False)
TargetType: Other
Root Node: Richard Wagner
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Richard Wagner, Richard Wagner: tokens:wagner prob:0.720 score:448189 perfect_match:False]
    ->Relation [name:music.lyricist.lyrics_written, music.lyricist.lyrics_written:
  RelationName: write=write
  RelationContext: libretto:0.0007,many:0.0006,write:0.0398
  RelationNameSynonym: libretto=lyricist:0.47,libretto=lyric:0.47,write=write:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Richard Wagner (m.06c44)] -> [music.lyricist.lyrics_written] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.06c44 fb:music.lyricist.lyrics_written ?0 .
 FILTER (?0 != fb:m.06c44) 
} LIMIT 30000}
Result: 12
Root Node: Richard Wagner
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Richard Wagner, Richard Wagner: tokens:wagner prob:0.720 score:448189 perfect_match:False]
    ->Relation [name:book.author.works_written, book.author.works_written:
  RelationName: write=write
  DerivationMatch: write=author
  RelationContext: many:0.0007,write:0.0464
  RelationNameSynonym: write=write:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Richard Wagner (m.06c44)] -> [book.author.works_written] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.06c44 fb:book.author.works_written ?0 .
 FILTER (?0 != fb:m.06c44) 
} LIMIT 30000}
Result: 43
Root Node: Richard Wagner
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Richard Wagner, Richard Wagner: tokens:wagner prob:0.720 score:448189 perfect_match:False]
    ->Relation [name:opera.librettist.libretti, opera.librettist.libretti:
  RelationContext: libretto:0.0623,many:0.0003,write:0.0173
  RelationNameSynonym: libretto=librettist:0.78,libretto=libretti:0.63]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Richard Wagner (m.06c44)] -> [opera.librettist.libretti] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.06c44 fb:opera.librettist.libretti ?0 .
 FILTER (?0 != fb:m.06c44) 
} LIMIT 30000}
Result: 15
Root Node: Richard Wagner
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Richard Wagner, Richard Wagner: tokens:wagner prob:0.720 score:448189 perfect_match:False]
    ->Relation [name:music.composer.compositions, music.composer.compositions:
  DerivationMatch: write=composition
  RelationContext: libretto:0.0018,many:0.0006,write:0.0344
  RelationNameSynonym: libretto=composer:0.60]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Richard Wagner (m.06c44)] -> [music.composer.compositions] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.06c44 fb:music.composer.compositions ?0 .
 FILTER (?0 != fb:m.06c44) 
} LIMIT 30000}
Result: 79
Root Node: Richard Wagner
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Richard Wagner, Richard Wagner: tokens:wagner prob:0.720 score:448189 perfect_match:False]
    ->Relation [name:base.catalog.cataloged_composer.music_catalog, base.catalog.cataloged_composer.music_catalog:
  RelationContext: write:0.0248
  RelationNameSynonym: libretto=composer:0.60]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Richard Wagner (m.06c44)] -> [base.catalog.cataloged_composer.music_catalog] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.06c44 fb:base.catalog.cataloged_composer.music_catalog ?0 .
 FILTER (?0 != fb:m.06c44) 
} LIMIT 30000}
Result: 1

Query: how many other names is ron glass known by
Entity: (u'Flash fiction', 0.439999507201, 9321, False)
Entity: (u'Goddess', 0.266666901333, 92476, False)
Entity: (u'Cochineal', 0.186666990933, 4534, False)
Entity: (u'camelCase', 0.106666600533, 47709, False)
Entity: (u'Ron Glass', 1.0, 2326, True)
Entity: (u'known by', 1.0, 0, True)
Entity: (u'Naming the American Civil War', 0.313541801419, 10198, False)
Entity: (u'Aardman Animations', 0.297297184989, 28660, False)
Entity: (u'Nir Rosen', 0.18918929401, 3744, False)
Entity: (u'Dark matter', 0.18918929401, 24942, False)
Entity: (u'Iraqi diaspora', 0.148648592495, 22, False)
Entity: (u'Glass', 0.844008317206, 223546, True)
Entity: (u'Ronald Weasley', 0.456242204414, 104582, False)
Entity: (u'Rum', 0.107941108947, 60456, False)
Entity: (u'Name', 0.100479565776, 45222, False)
TargetType: Other
Root Node: Ron Glass
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Ron Glass, Ron Glass: tokens:ron,glass prob:1.000 score:2326 perfect_match:True]
    ->Relation [name:people.person.profession, people.person.profession:
  RelationContext: other:0.0004,name:0.0041,many:0.0006,know:0.0115]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Ron Glass (m.03h82p)] -> [people.person.profession] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.03h82p fb:people.person.profession ?0 .
 FILTER (?0 != fb:m.03h82p) 
} LIMIT 30000}
Result: 2
Root Node: Ron Glass
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Ron Glass, Ron Glass: tokens:ron,glass prob:1.000 score:2326 perfect_match:True]
    ->Relation [name:people.person.religion, people.person.religion:
  RelationContext: other:0.0006,name:0.0015,many:0.0009,know:0.0022]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Ron Glass (m.03h82p)] -> [people.person.religion] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.03h82p fb:people.person.religion ?0 .
 FILTER (?0 != fb:m.03h82p) 
} LIMIT 30000}
Result: 1
Root Node: Ron Glass
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Ron Glass, Ron Glass: tokens:ron,glass prob:1.000 score:2326 perfect_match:True]
    ->Relation [name:people.person.ethnicity, people.person.ethnicity:
  RelationContext: other:0.0007,name:0.0027,many:0.0009,know:0.0033]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Ron Glass (m.03h82p)] -> [people.person.ethnicity] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.03h82p fb:people.person.ethnicity ?0 .
 FILTER (?0 != fb:m.03h82p) 
} LIMIT 30000}
Result: 1
Root Node: Ron Glass
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Ron Glass, Ron Glass: tokens:ron,glass prob:1.000 score:2326 perfect_match:True]
    ->Relation [name:people.person.nationality, people.person.nationality:
  RelationContext: other:0.0005,name:0.0015,many:0.0008,know:0.0016]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Ron Glass (m.03h82p)] -> [people.person.nationality] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.03h82p fb:people.person.nationality ?0 .
 FILTER (?0 != fb:m.03h82p) 
} LIMIT 30000}
Result: 1
Root Node: Ron Glass
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Ron Glass, Ron Glass: tokens:ron,glass prob:1.000 score:2326 perfect_match:True]
    ->Relation [name:people.person.parents, people.person.parents:
  RelationContext: other:0.0005,name:0.0031,many:0.0002,know:0.0014]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Ron Glass (m.03h82p)] -> [people.person.parents] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.03h82p fb:people.person.parents ?0 .
 FILTER (?0 != fb:m.03h82p) 
} LIMIT 30000}
Result: 2
Root Node: Ron Glass
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Ron Glass, Ron Glass: tokens:ron,glass prob:1.000 score:2326 perfect_match:True]
    ->Relation [name:common.topic.alias, common.topic.alias:
  RelationNameSynonym: name=alias:0.49]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Ron Glass (m.03h82p)] -> [common.topic.alias] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.03h82p fb:common.topic.alias ?0 .
 FILTER (?0 != fb:m.03h82p) 
} LIMIT 30000}
Result: 4

Query: what was the american past about
Entity: (u'The American Past', 0.454545454545, 5, True)
Entity: (u'The American past', 0.181818181818, 2, True)
Entity: (u'Cinema of the United States', 0.413306543581, 65777, False)
Entity: (u'The American (Novel)', 0.170842698919, 847, True)
Entity: (u'Past', 0.590100512354, 21774, True)
TargetType: Other
Root Node: The American Past
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The American Past, The American Past: tokens:the,american,past prob:0.455 score:5 perfect_match:True]
    ->Relation [name:broadcast.content.artist, broadcast.content.artist:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The American Past (m.05v0tbd)] -> [broadcast.content.artist] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.05v0tbd fb:broadcast.content.artist ?0 .
 FILTER (?0 != fb:m.05v0tbd) 
} LIMIT 300
Result: Calder Pickett (m.065m87j)
Root Node: The American Past
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The American Past, The American Past: tokens:the,american,past prob:0.455 score:5 perfect_match:True]
    ->Relation [name:broadcast.content.genre, broadcast.content.genre:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The American Past (m.05v0tbd)] -> [broadcast.content.genre] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.05v0tbd fb:broadcast.content.genre ?0 .
 FILTER (?0 != fb:m.05v0tbd) 
} LIMIT 300
Result: Educational Radio (m.0645qx2)
Root Node: The American Past
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The American Past, The American Past: tokens:the,american,past prob:0.455 score:5 perfect_match:True]
    ->Relation [name:radio.radio_program.subjects, radio.radio_program.subjects:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The American Past (m.05v0tbd)] -> [radio.radio_program.subjects] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.05v0tbd fb:radio.radio_program.subjects ?0 .
 FILTER (?0 != fb:m.05v0tbd) 
} LIMIT 300
Result: History (m.03g3w)
Root Node: The American Past
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The American Past, The American Past: tokens:the,american,past prob:0.455 score:5 perfect_match:True]
    ->Relation [name:radio.radio_program.first_broadcast, radio.radio_program.first_broadcast:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The American Past (m.05v0tbd)] -> [radio.radio_program.first_broadcast] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.05v0tbd fb:radio.radio_program.first_broadcast ?0 .
 FILTER (?0 != fb:m.05v0tbd) 
} LIMIT 300
Result: 1973
Root Node: The American Past
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The American Past, The American Past: tokens:the,american,past prob:0.455 score:5 perfect_match:True]
    ->Relation [name:radio.radio_program.final_broadcast, radio.radio_program.final_broadcast:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The American Past (m.05v0tbd)] -> [radio.radio_program.final_broadcast] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.05v0tbd fb:radio.radio_program.final_broadcast ?0 .
 FILTER (?0 != fb:m.05v0tbd) 
} LIMIT 300
Result: 2005
Root Node: The American Past
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The American Past, The American Past: tokens:the,american,past prob:0.455 score:5 perfect_match:True]
    ->Relation [name:broadcast.content.production_start, broadcast.content.production_start:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The American Past (m.05v0tbd)] -> [broadcast.content.production_start] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.05v0tbd fb:broadcast.content.production_start ?0 .
 FILTER (?0 != fb:m.05v0tbd) 
} LIMIT 300
Result: 1973

Query: who completed mozart_s requiem
Entity: (u'Requiem in D minor, K. 626 (S\xfc\xdfmayr completion): IIIf. Sequenz: "Lacrimosa"', 0.999922964332, 12980, False)
Entity: (u'Wolfgang Amadeus Mozart', 1.0, 749859, False)
Entity: (u'Requiem', 0.431997595907, 42986, True)
TargetType: person, organization, employer, character
Root Node: Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa"
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa", Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa": tokens:mozart_s,requiem prob:1.000 score:12980 perfect_match:False]
    ->Relation [name:music.composition.date_completed, music.composition.date_completed:
  RelationName: complete=complete
  RelationContext: complete:0.0156
  RelationNameSynonym: complete=complete:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa" (m.02xtrr)] -> [music.composition.date_completed] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02xtrr fb:music.composition.date_completed ?0 .
 FILTER (?0 != fb:m.02xtrr) 
} LIMIT 300
Result: 1791
Root Node: Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa"
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa", Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa": tokens:mozart_s,requiem prob:1.000 score:12980 perfect_match:False]
    ->Relation [name:media_common.unfinished_work.completions, media_common.unfinished_work.completions -> media_common.completion_of_unfinished_work.finisher:
  DerivationMatch: complete=completion,complete=completion
  RelationContext: complete:0.0791
  RelationNameSynonym: complete=completion:0.45,complete=completion:0.45]
  Variable [index:0]
    ->Relation [name:media_common.completion_of_unfinished_work.finisher, media_common.unfinished_work.completions -> media_common.completion_of_unfinished_work.finisher:
  DerivationMatch: complete=completion,complete=completion
  RelationContext: complete:0.0791
  RelationNameSynonym: complete=completion:0.45,complete=completion:0.45]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa" (m.02xtrr)] -> [media_common.unfinished_work.completions] -> [?0]
  [?0] -> [media_common.completion_of_unfinished_work.finisher] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.02xtrr fb:media_common.unfinished_work.completions ?0 .
 ?0 fb:media_common.completion_of_unfinished_work.finisher ?1 .
 FILTER (?1 != fb:m.02xtrr) 
} LIMIT 300
Result: Franz Xaver Süssmayr (m.02xttb)
Root Node: Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa"
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa", Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa": tokens:mozart_s,requiem prob:1.000 score:12980 perfect_match:False]
    ->Relation [name:media_common.unfinished_work.completions, media_common.unfinished_work.completions:
  RelationNameSynonym: complete=completion:0.45]
  Variable [index:0]
    ->Relation [name:media_common.completion_of_unfinished_work.finisher, media_common.completion_of_unfinished_work.finisher:
  DerivationMatch: complete=completion
  RelationNameSynonym: complete=completion:0.45]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa" (m.02xtrr)] -> [media_common.unfinished_work.completions] -> [?0]
  [?0] -> [media_common.completion_of_unfinished_work.finisher] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.02xtrr fb:media_common.unfinished_work.completions ?0 .
 ?0 fb:media_common.completion_of_unfinished_work.finisher ?1 .
 FILTER (?1 != fb:m.02xtrr) 
} LIMIT 300
Result: Franz Xaver Süssmayr (m.02xttb)
Root Node: Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa"
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa", Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa": tokens:mozart_s,requiem prob:1.000 score:12980 perfect_match:False]
    ->Relation [name:music.composition.composer, music.composition.composer:
  RelationContext: complete:0.0028]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa" (m.02xtrr)] -> [music.composition.composer] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02xtrr fb:music.composition.composer ?0 .
 FILTER (?0 != fb:m.02xtrr) 
} LIMIT 300
Result: Wolfgang Amadeus Mozart (m.082db) Franz Xaver Süssmayr (m.02xttb)
Root Node: Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa"
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa", Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa": tokens:mozart_s,requiem prob:1.000 score:12980 perfect_match:False]
    ->Relation [name:music.composition.form, music.composition.form:
  RelationContext: complete:0.0034]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa" (m.02xtrr)] -> [music.composition.form] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02xtrr fb:music.composition.form ?0 .
 FILTER (?0 != fb:m.02xtrr) 
} LIMIT 300
Result: Requiem (m.0197d_)
Root Node: Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa"
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa", Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa": tokens:mozart_s,requiem prob:1.000 score:12980 perfect_match:False]
    ->Relation [name:music.composition.musical_key, music.composition.musical_key:
  RelationContext: complete:0.0017]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Requiem in D minor, K. 626 (Süßmayr completion): IIIf. Sequenz: "Lacrimosa" (m.02xtrr)] -> [music.composition.musical_key] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02xtrr fb:music.composition.musical_key ?0 .
 FILTER (?0 != fb:m.02xtrr) 
} LIMIT 300
Result: D minor (m.06bhsw)

Query: when gatorade was first developed
Entity: (u'First developed', 0.5, 0, True)
Entity: (u'First developed', 0.5, 0, True)
Entity: (u'Gatorade', 0.998550317651, 181507, True)
TargetType: Date
Root Node: Gatorade
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Gatorade, Gatorade: tokens:gatorade prob:0.999 score:181507 perfect_match:True]
    ->Relation [name:business.brand.products, business.brand.products:
  RelationContext: develop:0.0008,first:0.0010]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Gatorade (m.01ghgx)] -> [business.brand.products] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01ghgx fb:business.brand.products ?0 .
 FILTER (?0 != fb:m.01ghgx) 
} LIMIT 300
Result: Gatorade G2 (m.0rnz2d8)
Root Node: Gatorade
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Gatorade, Gatorade: tokens:gatorade prob:0.999 score:181507 perfect_match:True]
    ->Relation [name:medicine.medical_treatment.used_to_treat, medicine.medical_treatment.used_to_treat:
  RelationContext: develop:0.0025,first:0.0010
  RelationNameSynonym: develop=use:0.40]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Gatorade (m.01ghgx)] -> [medicine.medical_treatment.used_to_treat] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01ghgx fb:medicine.medical_treatment.used_to_treat ?0 .
 FILTER (?0 != fb:m.01ghgx) 
} LIMIT 300
Result: Viral Gastroenteritis (m.06z3t1z) Gastroenteritis (m.03k2qf)

Query: what are the theme areas at disneyland
Entity: (u'Theme areas', 0.5, 0, True)
Entity: (u'Theme areas', 0.5, 0, True)
Entity: (u'Disneyland', 0.937570247085, 528268, True)
Entity: (u'Area', 0.517436829902, 76568, False)
Entity: (u'L\xe9og\xe2ne', 0.115932990343, 8494, False)
TargetType: Other
Root Node: Disneyland
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Disneyland, Disneyland: tokens:disneyland prob:0.938 score:528268 perfect_match:True]
    ->Relation [name:location.location.area, location.location.area:
  RelationName: area=area
  RelationContext: theme:0.0002,area:0.0815
  RelationNameSynonym: area=location:0.46,area=area:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Disneyland (m.02fzs)] -> [location.location.area] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02fzs fb:location.location.area ?0 .
 FILTER (?0 != fb:m.02fzs) 
} LIMIT 300
Result: 0.647
Root Node: Disneyland
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Disneyland, Disneyland: tokens:disneyland prob:0.938 score:528268 perfect_match:True]
    ->Relation [name:amusement_parks.park.areas, amusement_parks.park.areas:
  RelationName: area=area
  RelationContext: theme:0.0333,area:0.0134
  RelationNameSynonym: area=park:0.41,area=area:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Disneyland (m.02fzs)] -> [amusement_parks.park.areas] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02fzs fb:amusement_parks.park.areas ?0 .
 FILTER (?0 != fb:m.02fzs) 
} LIMIT 300
Result: Adventureland (m.05l6k8) Critter Country (m.05g7l2) Frontierland (m.05gkvs) Main Street, U.S.A. (m.055l1n) Tomorrowland (m.050h8f) New Orleans Square (m.05zp1w) Mickey's Toontown (m.06544j) Fantasyland (m.057_4r)
Root Node: Disneyland
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Disneyland, Disneyland: tokens:disneyland prob:0.938 score:528268 perfect_match:True]
    ->Relation [name:base.disneyana.disney_product_theme.disney_products_based_on_this_theme, base.disneyana.disney_product_theme.disney_products_based_on_this_theme:
  RelationName: theme=theme,theme=theme
  RelationNameSynonym: theme=theme:1.00,theme=theme:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Disneyland (m.02fzs)] -> [base.disneyana.disney_product_theme.disney_products_based_on_this_theme] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02fzs fb:base.disneyana.disney_product_theme.disney_products_based_on_this_theme ?0 .
 FILTER (?0 != fb:m.02fzs) 
} LIMIT 300
Result: Disneyland ticket booth (m.05kxr90)
Root Node: Disneyland
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Disneyland, Disneyland: tokens:disneyland prob:0.938 score:528268 perfect_match:True]
    ->Relation [name:amusement_parks.park.rides, amusement_parks.park.rides:
  RelationContext: theme:0.0022,area:0.0010
  RelationNameSynonym: area=park:0.41]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Disneyland (m.02fzs)] -> [amusement_parks.park.rides] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02fzs fb:amusement_parks.park.rides ?0 .
 FILTER (?0 != fb:m.02fzs) 
} LIMIT 300
Result: Indiana Jones Adventure: Temple of the Forbidden Eye (m.0bwh682) Pirates of the Caribbean (m.01q8w9) Splash Mountain (m.05086j) Haunted Mansion (m.01p79p) Sailing Ship Columbia (m.0263qj9) Pirate's Lair on Tom Sawyer Island (m.02pm2fm) Golden Horseshoe Saloon (m.0gmbgw) Gadget's Go Coaster (m.0bkxys) King Arthur Carrousel (m.0byx2l) Mr. Toad's Wild Ride (m.05g79s) Alice in Wonderland (m.026wwxd) It's a Small World (m.028k8w) Motor Boat Cruise (m.02r0_rt) Disneyland Railroad (m.0550hw) Adventure Thru Inner Space (m.058hb9) Finding Nemo Submarine Voyage (m.05jzmt) Disneyland Monorail System (m.05k9c5) Skyway (m.05np4w) America Sings (m.060rkf) Rocket Jets (m.06n8lk) Submarine Voyage (m.07s33k) Peter Pan's Flight (m.08959f) Holidayland (m.0by64_) Main Street Cinema (m.0f3wfk) The Disney Gallery (m.0f3wvt) Flying Saucers (m.0fz48l) Star Tours: The Adventures Continue (m.0h_j_hj) Autopia (m.05k9d7) Big Thunder Mountain Railroad (m.04s4p6) Matterhorn Bobsleds (m.04h1hd) PeopleMover (m.0431hs) Jungle Cruise (m.060lwt) Rocket Rods (m.04tpgr) Storybook Land Canal Boats (m.0h7505) Mad Tea Party (m.0cgzmk) Buzz Lightyear attractions (m.04c7h4) Dumbo the Flying Elephant (m.02693xq) Space Mountain (m.02z2qmd) Indiana Jones Adventure: Temple of the Crystal Skull (m.0421l_)
Root Node: Disneyland
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Disneyland, Disneyland: tokens:disneyland prob:0.938 score:528268 perfect_match:True]
    ->Relation [name:amusement_parks.park.annual_visits, amusement_parks.park.annual_visits:
  RelationNameSynonym: area=park:0.41]
  Variable [index:0]
    ->Relation [name:measurement_unit.dated_integer.number, measurement_unit.dated_integer.number:
  ]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Disneyland (m.02fzs)] -> [amusement_parks.park.annual_visits] -> [?0]
  [?0] -> [measurement_unit.dated_integer.number] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.02fzs fb:amusement_parks.park.annual_visits ?0 .
 ?0 fb:measurement_unit.dated_integer.number ?1 .
 FILTER (?1 != fb:m.02fzs) 
} LIMIT 300
Result: 14800000
Root Node: Disneyland
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Disneyland, Disneyland: tokens:disneyland prob:0.938 score:528268 perfect_match:True]
    ->Relation [name:amusement_parks.park.opened, amusement_parks.park.opened:
  RelationContext: theme:0.0045,area:0.0033
  RelationNameSynonym: area=park:0.41]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Disneyland (m.02fzs)] -> [amusement_parks.park.opened] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02fzs fb:amusement_parks.park.opened ?0 .
 FILTER (?0 != fb:m.02fzs) 
} LIMIT 300
Result: 1955-07-17

Query: how many films has tim burton produced
Entity: (u'Bruce Lee', 1.0, 227180, False)
Entity: (u'Tim Burton', 0.994362828949, 1638763, True)
Entity: (u'Film', 0.710032297078, 3444452, False)
TargetType: Other
Root Node: Tim Burton
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Tim Burton, Tim Burton: tokens:tim,burton prob:0.994 score:1638763 perfect_match:True]
    ->Relation [name:film.producer.film, film.producer.film:
  RelationName: produce=producer,film=film,film=film
  DerivationMatch: produce=producer,film=film,film=film
  RelationContext: many:0.0004,produce:0.0371,have:0.0038,film:0.0810
  RelationNameSynonym: film=film:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Tim Burton (m.07rd7)] -> [film.producer.film] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.07rd7 fb:film.producer.film ?0 .
 FILTER (?0 != fb:m.07rd7) 
} LIMIT 30000}
Result: 15
Root Node: Tim Burton
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Tim Burton, Tim Burton: tokens:tim,burton prob:0.994 score:1638763 perfect_match:True]
    ->Relation [name:film.film_production_designer.films_production_designed, film.film_production_designer.films_production_designed:
  RelationName: film=film,film=film,film=film
  DerivationMatch: produce=production,produce=production,film=film,film=film,film=film
  RelationContext: many:0.0008,produce:0.0054,have:0.0028,film:0.0578
  RelationNameSynonym: produce=production:0.44,produce=production:0.44,film=film:1.00,film=film:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Tim Burton (m.07rd7)] -> [film.film_production_designer.films_production_designed] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.07rd7 fb:film.film_production_designer.films_production_designed ?0 .
 FILTER (?0 != fb:m.07rd7) 
} LIMIT 30000}
Result: 1
Root Node: Tim Burton
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Tim Burton, Tim Burton: tokens:tim,burton prob:0.994 score:1638763 perfect_match:True]
    ->Relation [name:film.cinematographer.film, film.cinematographer.film:
  RelationName: film=film,film=film
  DerivationMatch: film=film,film=film
  RelationContext: many:0.0010,produce:0.0084,have:0.0039,film:0.0786
  RelationNameSynonym: film=cinematographer:0.58,film=film:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Tim Burton (m.07rd7)] -> [film.cinematographer.film] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.07rd7 fb:film.cinematographer.film ?0 .
 FILTER (?0 != fb:m.07rd7) 
} LIMIT 30000}
Result: 1
Root Node: Tim Burton
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Tim Burton, Tim Burton: tokens:tim,burton prob:0.994 score:1638763 perfect_match:True]
    ->Relation [name:film.actor.film, film.actor.film:
  RelationName: film=film,film=film
  RelationContext: produce:0.0022,have:0.0044,film:0.0201
  RelationNameSynonym: film=actor:0.52,film=film:1.00]
  Variable [index:0]
    ->Relation [name:film.performance.film, film.performance.film:
  RelationName: film=film,film=film
  DerivationMatch: film=film,film=film
  RelationNameSynonym: film=film:1.00]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Tim Burton (m.07rd7)] -> [film.actor.film] -> [?0]
  [?0] -> [film.performance.film] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.07rd7 fb:film.actor.film ?0 .
 ?0 fb:film.performance.film ?1 .
 FILTER (?1 != fb:m.07rd7) 
} LIMIT 30000}
Result: 6
Root Node: Tim Burton
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Tim Burton, Tim Burton: tokens:tim,burton prob:0.994 score:1638763 perfect_match:True]
    ->Relation [name:film.writer.film, film.writer.film:
  RelationName: film=film,film=film
  DerivationMatch: film=film,film=film
  RelationContext: many:0.0003,produce:0.0077,have:0.0034,film:0.0883
  RelationNameSynonym: film=film:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Tim Burton (m.07rd7)] -> [film.writer.film] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.07rd7 fb:film.writer.film ?0 .
 FILTER (?0 != fb:m.07rd7) 
} LIMIT 30000}
Result: 4
Root Node: Tim Burton
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Tim Burton, Tim Burton: tokens:tim,burton prob:0.994 score:1638763 perfect_match:True]
    ->Relation [name:film.director.film, film.director.film:
  RelationName: film=film,film=film
  DerivationMatch: film=film,film=film
  RelationContext: many:0.0002,produce:0.0076,have:0.0023,film:0.1072
  RelationNameSynonym: film=film:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Tim Burton (m.07rd7)] -> [film.director.film] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.07rd7 fb:film.director.film ?0 .
 FILTER (?0 != fb:m.07rd7) 
} LIMIT 30000}
Result: 32

Query: how many politicians have served in the us navy
Entity: (u'The U.S. Navy', 0.333333333333, 0, True)
Entity: (u'The U.S. Navy', 0.333333333333, 0, True)
Entity: (u'The U.S. Navy', 0.333333333333, 0, True)
Entity: (u'Entrapment', 0.264493311955, 1724, False)
Entity: (u'Alimony', 0.15579687904, 18386, False)
Entity: (u'Treason', 0.130434649717, 46582, False)
Entity: (u'United States Navy', 0.991049786961, 1565298, False)
Entity: (u'United States of America', 0.596041510844, 149531631, False)
Entity: (u'served in', 0.5, 0, True)
Entity: (u'served in', 0.5, 0, True)
Entity: (u'German federal election, March 1933', 0.348180888537, 0, False)
Entity: (u'Th\xe9us', 0.175952614665, 4, False)
Entity: (u'Lewis Cass', 0.147169070805, 7645, False)
Entity: (u'Inthe', 0.143579278312, 0, True)
Entity: (u'Politician', 0.769146936589, 73566, False)
Entity: (u'Politics', 0.111597642535, 464041, False)
TargetType: Other
Root Node: United States Navy
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:United States Navy, United States Navy: tokens:us,navy prob:0.991 score:1565298 perfect_match:False]
    ->Relation [name:military.armed_force.personnel, military.armed_force.personnel:
  ]
  Variable [index:0]
    ->Relation [name:freebase.valuenotation.has_value, freebase.valuenotation.has_value:
  RelationName: have=have
  DerivationMatch: have=have
  RelationNameSynonym: have=have:1.00,many=have:0.42]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [United States Navy (m.07wg3)] -> [military.armed_force.personnel] -> [?0]
  [?0] -> [freebase.valuenotation.has_value] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.07wg3 fb:military.armed_force.personnel ?0 .
 ?0 fb:freebase.valuenotation.has_value ?1 .
 FILTER (?1 != fb:m.07wg3) 
} LIMIT 30000}
Result: 8
Root Node: The U.S. Navy
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The U.S. Navy, The U.S. Navy: tokens:the,us,navy prob:0.333 score:0 perfect_match:True]
    ->Relation [name:book.written_work.author, book.written_work.author:
  RelationContext: many:0.0007,have:0.0043,serve:0.0003]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The U.S. Navy (m.06nz8hk)] -> [book.written_work.author] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.06nz8hk fb:book.written_work.author ?0 .
 FILTER (?0 != fb:m.06nz8hk) 
} LIMIT 30000}
Result: 1
Root Node: United States Navy
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:United States Navy, United States Navy: tokens:us,navy prob:0.991 score:1565298 perfect_match:False]
    ->Relation [name:military.armed_force.personnel, military.armed_force.personnel -> military.military_service.military_person:
  DerivationMatch: serve=service
  RelationContext: many:0.0002,politician:0.0010,have:0.0028,serve:0.0283]
  Variable [index:0]
    ->Relation [name:military.military_service.military_person, military.armed_force.personnel -> military.military_service.military_person:
  DerivationMatch: serve=service
  RelationContext: many:0.0002,politician:0.0010,have:0.0028,serve:0.0283]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [United States Navy (m.07wg3)] -> [military.armed_force.personnel] -> [?0]
  [?0] -> [military.military_service.military_person] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.07wg3 fb:military.armed_force.personnel ?0 .
 ?0 fb:military.military_service.military_person ?1 .
 FILTER (?1 != fb:m.07wg3) 
} LIMIT 30000}
Result: 2006
Root Node: The U.S. Navy
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The U.S. Navy, The U.S. Navy: tokens:the,us,navy prob:0.333 score:0 perfect_match:True]
    ->Relation [name:book.book_edition.book, book.book_edition.book:
  RelationContext: have:0.0066]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The U.S. Navy (m.093nytk)] -> [book.book_edition.book] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?0) where {
 SELECT ?0 where {
 fb:m.093nytk fb:book.book_edition.book ?0 .
 FILTER (?0 != fb:m.093nytk) 
} LIMIT 30000}
Result: 1
Root Node: Politician
Candidate Graph:   QueryCandidate [pattern:ERMRERT
  Entity [name:Politician, Politician: tokens:politicians prob:0.769 score:73566 perfect_match:False]
    ->Relation [name:people.profession.people_with_this_profession, people.profession.people_with_this_profession -> people.person.nationality:
  RelationContext: have:0.0040,serve:0.0008]
  Variable [index:0]
    ->Relation [name:people.person.nationality, people.profession.people_with_this_profession -> people.person.nationality:
  RelationContext: have:0.0040,serve:0.0008]
    ->Relation [name:base.kwebbase.kwtopic.has_sentences, base.kwebbase.kwtopic.has_sentences:
  RelationName: have=have
  DerivationMatch: have=have
  RelationNameSynonym: many=have:0.42,have=have:1.00]
  Entity [name:United States of America, United States of America: tokens:the,us prob:0.596 score:149531631 perfect_match:False]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRERT
  [Politician (m.0fj9f)] -> [people.profession.people_with_this_profession] -> [?0]
  [?0] -> [people.person.nationality] -> [United States of America (m.09c7w0)]
  [?0] -> [base.kwebbase.kwtopic.has_sentences] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.0fj9f fb:people.profession.people_with_this_profession ?0 .
 ?0 fb:people.person.nationality fb:m.09c7w0 .
 ?0 fb:base.kwebbase.kwtopic.has_sentences ?1 .
 FILTER (?1 != fb:m.0fj9f && ?1 != fb:m.09c7w0) 
} LIMIT 30000}
Result: 1613
Root Node: Politician
Candidate Graph:   QueryCandidate [pattern:ERMRERT
  Entity [name:Politician, Politician: tokens:politicians prob:0.769 score:73566 perfect_match:False]
    ->Relation [name:people.profession.people_with_this_profession, people.profession.people_with_this_profession -> people.person.nationality:
  RelationContext: have:0.0040,serve:0.0008]
  Variable [index:0]
    ->Relation [name:people.person.nationality, people.profession.people_with_this_profession -> people.person.nationality:
  RelationContext: have:0.0040,serve:0.0008]
    ->Relation [name:freebase.valuenotation.has_value, freebase.valuenotation.has_value:
  RelationName: have=have
  DerivationMatch: have=have
  RelationNameSynonym: many=have:0.42,have=have:1.00]
  Entity [name:United States of America, United States of America: tokens:the,us prob:0.596 score:149531631 perfect_match:False]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRERT
  [Politician (m.0fj9f)] -> [people.profession.people_with_this_profession] -> [?0]
  [?0] -> [people.person.nationality] -> [United States of America (m.09c7w0)]
  [?0] -> [freebase.valuenotation.has_value] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT count(?1) where {
 SELECT ?1 where {
 fb:m.0fj9f fb:people.profession.people_with_this_profession ?0 .
 ?0 fb:people.person.nationality fb:m.09c7w0 .
 ?0 fb:freebase.valuenotation.has_value ?1 .
 FILTER (?1 != fb:m.0fj9f && ?1 != fb:m.09c7w0) 
} LIMIT 30000}
Result: 402

Query: what are some object-oriented programming languages
Entity: (u'Object-oriented programming', 0.999987096885, 232499, False)
Entity: (u'Programming language', 0.982300081132, 18949, False)
Entity: (u'Language', 0.546601915644, 110409, False)
Entity: (u'Computer programming', 0.535864586069, 62728, False)
Entity: (u'Programming', 0.18876521462, 245, True)
TargetType: Other
Root Node: Programming language
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Programming language, Programming language: tokens:programming,languages prob:0.982 score:18949 perfect_match:False]
    ->Relation [name:type.object.name, type.object.name:
  RelationName: object-oriented=object
  RelationNameSynonym: object-oriented=object:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Programming language (m.05r20)] -> [type.object.name] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.05r20 fb:type.object.name ?0 .
 FILTER (?0 != fb:m.05r20) 
} LIMIT 300
Result: Programming language
Root Node: Object-oriented programming
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Object-oriented programming, Object-oriented programming: tokens:object-oriented,programming,languages prob:1.000 score:232499 perfect_match:False]
    ->Relation [name:computer.programming_language_paradigm.languages, computer.programming_language_paradigm.languages:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Object-oriented programming (m.05prj)] -> [computer.programming_language_paradigm.languages] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.05prj fb:computer.programming_language_paradigm.languages ?0 .
 FILTER (?0 != fb:m.05prj) 
} LIMIT 300
Result: Java (m.07sbkfb) Io (m.01vtm2) Curl (m.0bp8q) ELENA (m.0dg9lh5) T (m.03ks39) ActionScript (m.02ky6z) Scala (m.091hdj) MiniD (m.02qwj88) Inform (m.01h67x) MetaL (m.03d4cmc) Embarcadero Delphi (m.01z1nj) Sather (m.073yv) Simula (m.079l6) Eiffel (m.02p6w) Mantra (m.02xkxpr) D (m.01kbt7) Vala (m.02wz_qj) SuperCollider (m.01ytpb) C++ (m.0jgqg) J (m.0jp72) CLU (m.02471) Lasso (m.02ldnl) Common Lisp Object System (m.01b5hv) Common Lisp (m.01tlw) NetRexx (m.0282msx) Oaklisp (m.042tk1) Rexx (m.06g3m) Smalltalk (m.070d2) EuLisp (m.0bm90n) NewtonScript (m.0gfwm) Smalltalk YX (m.0420zs3) Visual Prolog (m.05sfxb) PHP (m.060kv) C# (m.07657k) Dylan (m.02f70) GOO (m.02q47bp) Oxygene (m.0bsb33) Tcl (m.07fw2) Joule (m.02j2p7) Modula-3 (m.01k159) Oberon-2 (m.029rvn) Oberon (m.05mrv) Corba IDL (m.05tthtg) Python (m.05z1_) Falcon (m.05mxmzj) Caml (m.076kx1) Lua (m.0chpd) Scratch (m.028167f) Etoys (m.0bfq5w) BETA (m.010134) Z++ (m.011jv1) XLISP (m.0172dd) ECMAScript (m.019syg) Component Pascal (m.01_1zc) Visual Basic .NET (m.01dpgv) Blitz BASIC (m.01jm0) F# (m.01jt82) ABAP (m.01nxv3) Q (m.01t8hq) Lexico (m.01xc3x) ZZT-oop (m.01yv1f) R (m.0212jm) Pike (m.025dw31) EusLisp Robot Programming Language (m.0260znl) J# (m.0268yl) Logtalk (m.026d5hv) Turing+ (m.026d9_y) MooTools (m.026x8k3) Keykit (m.026xgmc) A++ (m.0270f0) VistaSmalltalk (m.0272tx2) Kite (m.027fhy7) S2 (m.028p7g) Frink (m.02_nh6) Nemerle (m.02h31b) Groovy (m.02js86) Generic Java (m.02jy2q) CorbaScript (m.02k1jt) Prograph (m.02l3jl) Cecil (m.02lvpc) Processing (m.02npry) The Green Object Oriented Language (m.02pm0j2) OTcl (m.02pp7t7) TOM (m.02q_q2j) Clascal (m.02qjcnn) Aikido Programming Language (m.02r51yv) .QL (m.02rh5fj) Polyphonic C# (m.02srjv) AmbientTalk (m.02vmqtb) Vala (m.02xj4df) Windows PowerShell (m.03790v) Judoscript (m.03c9pzr) QUILL (m.03ckhvp) Cobra (m.03clk94) Dialect (m.03cmd8m) Cool (m.03gxv97) Neko (m.03hhr4m) F-Script (m.03n27r) Unicon (m.03n9v6) LPC (m.03nk21) SETL (m.03ppzh) S (m.03pxm2) Water programming language (m.03qtl5) Claire (m.03r1wd) ROOP (m.03r370) Afnix programming language (m.03r9fn) Aldor (m.03sjgv) Abel programming language (m.03sk94) Extensible ML (m.03t8dm) O'Haskell (m.03t8dz) Pnuts (m.04043kd) Fuxi Programming Language (m.04050bb) Felix (m.0419cp) Object Lisp (m.042ttz) ObjectLOGO (m.042tvq) Object Oberon (m.042tyz) Object-Oriented Turing (m.042v27) C* (m.042vgj) Nu (m.043jn7w) LiveCode (m.0490j1) Hugo (m.04bq33) Python for S60 (m.04grg7w) Objective-J (m.04ldrth) Object REXX (m.04w43s) E (m.04xw5j) Microsoft Small Basic (m.04ygytb) Mercury (m.04zsm) Karel (m.051624) Scriptol (m.0521mgd) MOO (m.0521z) MATLAB (m.053_x) BeanShell (m.05bw2b) SMALL (m.05yl8k) Axum (m.05ztn31) Harbour (m.063h0s) X10 (m.0672c1) Ferite (m.06mmmy) Yoix (m.06z3b2) Compact Application Solution Language (m.070s08) Bistro (m.0729m2) SNOBOL (m.079lq) Turing (m.07n77) Squirrel (m.084pb2) A♯ (Axiom) (m.08jcqx) Sing# (m.08pndh) Spec# (m.08pytf) Fjölnir (m.090b_z) Tea (m.09c3bc) Alice (m.09fhy0) Turbo Pascal (m.09jsd) Karel++ (m.0bss63) Little b (m.0ckv51) Objeck (m.0cz9tkr) Dao Language (m.0f1qvd) Realbasic (m.0f78ns) JADE (m.0fbzc1) Visual Basic (m.0fp_1y) Lisaac (m.0gb_wh) Speedcoding (m.0gdxqx) Alpoca (m.0gh50t7) Cadence SKILL (m.0ghmfk) Chapel (m.0gnckq) AgentSheets (m.0gzx5x) PowerBASIC (m.0h6g8) CoffeeScript (m.0hjc5m0) MoonScript (m.0hjlb4k) Pike (m.0lxk7) F* (m.0ql079r) UnrealScript (m.0vgmh) Nimrod (m.0vpk27_) Oz (m.01m1y8) Objective-C (m.05q31) JavaScript (m.02p97) Lisp (m.04kyw) Ruby (m.06ff5) COBOL (m.01zpg) Self (m.0gd42) Fortran (m.02_94) ColdFusion Markup Language (m.03tsq7) Perl (m.05zrn) Object Pascal (m.02yjg_) Cω (m.040zrk) Caché ObjectScript (m.06yp6q) Squeak (m.09bhx) Visual FoxPro (m.017v2d) Racket (m.0974fb) Game Maker Language (m.0340d7) Ioke (m.04ybtsc) JavaFX Script (m.02r0l4g) Bigloo (m.0c00_c)
Root Node: Programming
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Programming, Programming: tokens:programming prob:0.189 score:245 perfect_match:True]
    ->Relation [name:type.object.name, type.object.name:
  RelationName: object-oriented=object
  RelationNameSynonym: object-oriented=object:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Programming (m.02snj9)] -> [type.object.name] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.02snj9 fb:type.object.name ?0 .
 FILTER (?0 != fb:m.02snj9) 
} LIMIT 300
Result: Programming
Root Node: Language
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Language, Language: tokens:languages prob:0.547 score:110409 perfect_match:False]
    ->Relation [name:type.object.name, type.object.name:
  RelationName: object-oriented=object
  RelationNameSynonym: object-oriented=object:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Language (m.04g7d)] -> [type.object.name] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.04g7d fb:type.object.name ?0 .
 FILTER (?0 != fb:m.04g7d) 
} LIMIT 300
Result: Language
Root Node: Computer programming
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Computer programming, Computer programming: tokens:programming prob:0.536 score:62728 perfect_match:False]
    ->Relation [name:type.object.name, type.object.name:
  RelationName: object-oriented=object
  RelationNameSynonym: object-oriented=object:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Computer programming (m.01mf_)] -> [type.object.name] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.01mf_ fb:type.object.name ?0 .
 FILTER (?0 != fb:m.01mf_) 
} LIMIT 300
Result: Computer programming

Query: what are the books in the chronicles of narnia series
Entity: (u'The Chronicles of Narnia', 0.831933, 43405, False)
Entity: (u'The Chronicles of Narnia (Film series)', 0.168067, 17332, False)
Entity: (u'The Chronicles of Narnia', 1.0, 43405, False)
Entity: (u'The Chronicles of Narnia: Prince Caspian', 1.0, 1652, False)
Entity: (u'The Chronicles of Narnia', 1.0, 43405, False)
Entity: (u'The Books', 0.776898125835, 3045, True)
Entity: (u'Terminator: The Sarah Connor Chronicles', 0.512775368798, 47135, False)
Entity: (u'German federal election, March 1933', 0.348180888537, 0, False)
Entity: (u'The Chronicles (Southern rap Album)', 0.324758400181, 0, True)
Entity: (u'The Chronicles of Amber', 0.16237920009, 20286, False)
Entity: (u'Lewis Cass', 0.147169070805, 7645, False)
Entity: (u'Inthe', 0.143579278312, 0, True)
Entity: (u'Book (m/0bt_c3)', 0.659496685521, 299831, False)
Entity: (u'Books of Chronicles', 0.192183839637, 30619, False)
Entity: (u'Chronicles: Volume One', 0.105350964125, 1389, False)
TargetType: Other
Root Node: The Chronicles of Narnia
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Chronicles of Narnia, The Chronicles of Narnia: tokens:the,chronicles,of,narnia,series prob:0.832 score:43405 perfect_match:False]
    ->Relation [name:book.literary_series.author_s, book.literary_series.author_s:
  RelationName: book=book
  RelationContext: book:0.0309
  RelationNameSynonym: book=literary:0.46,book=author:0.54]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Chronicles of Narnia (m.07k3w)] -> [book.literary_series.author_s] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.07k3w fb:book.literary_series.author_s ?0 .
 FILTER (?0 != fb:m.07k3w) 
} LIMIT 300
Result: C. S. Lewis (m.01wd02c)
Root Node: The Chronicles of Narnia
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Chronicles of Narnia, The Chronicles of Narnia: tokens:the,chronicles,of,narnia,series prob:0.832 score:43405 perfect_match:False]
    ->Relation [name:book.literary_series.works_in_this_series, book.literary_series.works_in_this_series:
  RelationName: book=book
  RelationContext: book:0.0549
  RelationNameSynonym: book=literary:0.46]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Chronicles of Narnia (m.07k3w)] -> [book.literary_series.works_in_this_series] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.07k3w fb:book.literary_series.works_in_this_series ?0 .
 FILTER (?0 != fb:m.07k3w) 
} LIMIT 300
Result: Prince Caspian (m.01k43c) The Magician's Nephew (m.0dy6y) The Horse and His Boy (m.026gmg) The Silver Chair (m.0276f9) The Voyage of the Dawn Treader (m.0276dv) The Lion, the Witch and the Wardrobe (m.01k43v) The Last Battle (m.01zk6m)
Root Node: The Chronicles of Narnia
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Chronicles of Narnia, The Chronicles of Narnia: tokens:the,chronicles,of,narnia,series prob:0.832 score:43405 perfect_match:False]
    ->Relation [name:book.literary_series.fictional_universe, book.literary_series.fictional_universe:
  RelationName: book=book
  RelationContext: book:0.0086
  RelationNameSynonym: book=literary:0.46]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Chronicles of Narnia (m.07k3w)] -> [book.literary_series.fictional_universe] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.07k3w fb:book.literary_series.fictional_universe ?0 .
 FILTER (?0 != fb:m.07k3w) 
} LIMIT 300
Result: Narnian Multiverse (m.051shsp)
Root Node: The Chronicles of Narnia
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Chronicles of Narnia, The Chronicles of Narnia: tokens:chronicles,of,narnia,series prob:1.000 score:43405 perfect_match:False]
    ->Relation [name:book.literary_series.author_s, book.literary_series.author_s:
  RelationName: book=book
  RelationContext: book:0.0309
  RelationNameSynonym: book=literary:0.46,book=author:0.54]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Chronicles of Narnia (m.07k3w)] -> [book.literary_series.author_s] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.07k3w fb:book.literary_series.author_s ?0 .
 FILTER (?0 != fb:m.07k3w) 
} LIMIT 300
Result: C. S. Lewis (m.01wd02c)
Root Node: The Chronicles of Narnia
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Chronicles of Narnia, The Chronicles of Narnia: tokens:chronicles,of,narnia,series prob:1.000 score:43405 perfect_match:False]
    ->Relation [name:book.literary_series.works_in_this_series, book.literary_series.works_in_this_series:
  RelationName: book=book
  RelationContext: book:0.0549
  RelationNameSynonym: book=literary:0.46]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Chronicles of Narnia (m.07k3w)] -> [book.literary_series.works_in_this_series] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.07k3w fb:book.literary_series.works_in_this_series ?0 .
 FILTER (?0 != fb:m.07k3w) 
} LIMIT 300
Result: Prince Caspian (m.01k43c) The Magician's Nephew (m.0dy6y) The Horse and His Boy (m.026gmg) The Silver Chair (m.0276f9) The Voyage of the Dawn Treader (m.0276dv) The Lion, the Witch and the Wardrobe (m.01k43v) The Last Battle (m.01zk6m)
Root Node: The Chronicles of Narnia
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:The Chronicles of Narnia, The Chronicles of Narnia: tokens:chronicles,of,narnia,series prob:1.000 score:43405 perfect_match:False]
    ->Relation [name:book.literary_series.fictional_universe, book.literary_series.fictional_universe:
  RelationName: book=book
  RelationContext: book:0.0086
  RelationNameSynonym: book=literary:0.46]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [The Chronicles of Narnia (m.07k3w)] -> [book.literary_series.fictional_universe] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.07k3w fb:book.literary_series.fictional_universe ?0 .
 FILTER (?0 != fb:m.07k3w) 
} LIMIT 300
Result: Narnian Multiverse (m.051shsp)

Query: what decision did manny pacquiao vs. timothy bradley end with
Entity: (u'Manny Pacquiao vs. Timothy Bradley', 1.0, 4, True)
Entity: (u'Timothy Bradley', 0.999511582473, 14325, True)
Entity: (u'Manny Pacqui\xe1o', 0.997628984622, 260311, False)
Entity: (u'Decision-making', 0.237567736896, 16435, False)
TargetType: Other
Root Node: Manny Pacquiao vs. Timothy Bradley
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Manny Pacquiao vs. Timothy Bradley, Manny Pacquiao vs. Timothy Bradley: tokens:manny,pacquiao,vs.,timothy,bradley prob:1.000 score:4 perfect_match:True]
    ->Relation [name:boxing.boxing_match.round_match_ended, boxing.boxing_match.round_match_ended:
  RelationName: end=end
  DerivationMatch: end=end
  RelationNameSynonym: end=end:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Manny Pacquiao vs. Timothy Bradley (m.0j24b7h)] -> [boxing.boxing_match.round_match_ended] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0j24b7h fb:boxing.boxing_match.round_match_ended ?0 .
 FILTER (?0 != fb:m.0j24b7h) 
} LIMIT 300
Result: 12
Root Node: Manny Pacquiao vs. Timothy Bradley
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Manny Pacquiao vs. Timothy Bradley, Manny Pacquiao vs. Timothy Bradley: tokens:manny,pacquiao,vs.,timothy,bradley prob:1.000 score:4 perfect_match:True]
    ->Relation [name:boxing.boxing_match.decision, boxing.boxing_match.decision:
  RelationName: decision=decision
  RelationNameSynonym: decision=decision:1.00]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Manny Pacquiao vs. Timothy Bradley (m.0j24b7h)] -> [boxing.boxing_match.decision] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0j24b7h fb:boxing.boxing_match.decision ?0 .
 FILTER (?0 != fb:m.0j24b7h) 
} LIMIT 300
Result: Split decision (m.0bwm3g)
Root Node: Manny Pacquiao vs. Timothy Bradley
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Manny Pacquiao vs. Timothy Bradley, Manny Pacquiao vs. Timothy Bradley: tokens:manny,pacquiao,vs.,timothy,bradley prob:1.000 score:4 perfect_match:True]
    ->Relation [name:boxing.boxing_match.fighters, boxing.boxing_match.fighters -> boxing.match_boxer_relationship.boxer:
  RelationContext: decision:0.0023]
  Variable [index:0]
    ->Relation [name:boxing.match_boxer_relationship.boxer, boxing.boxing_match.fighters -> boxing.match_boxer_relationship.boxer:
  RelationContext: decision:0.0023]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Manny Pacquiao vs. Timothy Bradley (m.0j24b7h)] -> [boxing.boxing_match.fighters] -> [?0]
  [?0] -> [boxing.match_boxer_relationship.boxer] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0j24b7h fb:boxing.boxing_match.fighters ?0 .
 ?0 fb:boxing.match_boxer_relationship.boxer ?1 .
 FILTER (?1 != fb:m.0j24b7h) 
} LIMIT 300
Result: Timothy Bradley (m.043mjq4) Manny Pacquiáo (m.03pmbb)
Root Node: Manny Pacquiao vs. Timothy Bradley
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Manny Pacquiao vs. Timothy Bradley, Manny Pacquiao vs. Timothy Bradley: tokens:manny,pacquiao,vs.,timothy,bradley prob:1.000 score:4 perfect_match:True]
    ->Relation [name:time.event.locations, time.event.locations:
  RelationContext: end:0.0043]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Manny Pacquiao vs. Timothy Bradley (m.0j24b7h)] -> [time.event.locations] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0j24b7h fb:time.event.locations ?0 .
 FILTER (?0 != fb:m.0j24b7h) 
} LIMIT 300
Result: MGM Grand Garden Arena (m.069qh6)
Root Node: Manny Pacquiao vs. Timothy Bradley
Candidate Graph:   QueryCandidate [pattern:ERT
  Entity [name:Manny Pacquiao vs. Timothy Bradley, Manny Pacquiao vs. Timothy Bradley: tokens:manny,pacquiao,vs.,timothy,bradley prob:1.000 score:4 perfect_match:True]
    ->Relation [name:boxing.boxing_match.planned_number_of_rounds, boxing.boxing_match.planned_number_of_rounds:
  ]
  Variable [index:0]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERT
  [Manny Pacquiao vs. Timothy Bradley (m.0j24b7h)] -> [boxing.boxing_match.planned_number_of_rounds] -> [?0]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?0 where {
 fb:m.0j24b7h fb:boxing.boxing_match.planned_number_of_rounds ?0 .
 FILTER (?0 != fb:m.0j24b7h) 
} LIMIT 300
Result: 12
Root Node: Manny Pacquiao vs. Timothy Bradley
Candidate Graph:   QueryCandidate [pattern:ERMRT
  Entity [name:Manny Pacquiao vs. Timothy Bradley, Manny Pacquiao vs. Timothy Bradley: tokens:manny,pacquiao,vs.,timothy,bradley prob:1.000 score:4 perfect_match:True]
    ->Relation [name:boxing.boxing_match.fighters, boxing.boxing_match.fighters:
  ]
  Variable [index:0]
    ->Relation [name:boxing.match_boxer_relationship.boxer, boxing.match_boxer_relationship.boxer:
  ]
  Variable [index:1]
  ]
Simple Candidate Graph: QueryCandidate pattern:ERMRT
  [Manny Pacquiao vs. Timothy Bradley (m.0j24b7h)] -> [boxing.boxing_match.fighters] -> [?0]
  [?0] -> [boxing.match_boxer_relationship.boxer] -> [?1]

SPARQL query: PREFIX fb: <http://rdf.freebase.com/ns/>
 SELECT DISTINCT ?1 where {
 fb:m.0j24b7h fb:boxing.boxing_match.fighters ?0 .
 ?0 fb:boxing.match_boxer_relationship.boxer ?1 .
 FILTER (?1 != fb:m.0j24b7h) 
} LIMIT 300
Result: Timothy Bradley (m.043mjq4) Manny Pacquiáo (m.03pmbb)

